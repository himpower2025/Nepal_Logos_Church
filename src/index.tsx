
import React, { useState, useEffect, useRef, useCallback, createContext, useContext } from 'react';
import ReactDOM from 'react-dom/client';
// Fix: Import `createPortal` from `react-dom` to be used for modals.
import { createPortal } from 'react-dom';
import './index.css';
import { initializeFirebaseServices, FirebaseServices } from './firebase';
import { 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    onAuthStateChanged,
    signOut,
    updateProfile
} from "firebase/auth";
import { 
    collection, 
    addDoc, 
    onSnapshot, 
    query, 
    orderBy, 
    doc, 
    updateDoc, 
    serverTimestamp,
    getDoc,
    setDoc,
    arrayUnion,
    Timestamp,
    where,
    arrayRemove,
    deleteDoc,
    getDocs,
    limit
} from "firebase/firestore";
import { ref, getDownloadURL, uploadBytes, deleteObject } from "firebase/storage";
import { getToken, onMessage } from "firebase/messaging";


// --- Firebase Context for safe dependency injection ---
const FirebaseContext = createContext<FirebaseServices | null>(null);
export const useFirebase = () => {
    const context = useContext(FirebaseContext);
    if (!context) {
        throw new Error("useFirebase must be used within a FirebaseProvider");
    }
    return context;
};

// --- Types ---
type UserRole = 'admin' | 'member' | 'news_contributor' | 'podcast_contributor';
type User = { id: string; name: string; email: string; avatar: string; roles: UserRole[]; fcmTokens?: string[] };
type Church = { id: string; name: string; logo: string; offeringDetails: any; };
type Comment = { id: string; author: User; authorId: string; content: string; createdAt: Timestamp; };
type PrayerRequest = { id:string; authorId: string; authorName: string; title: string; content: string; image?: string | null; prayedBy: string[]; comments: Comment[]; createdAt: Timestamp; };
type Podcast = { id: string; title: string; authorId: string; authorName: string; audioUrl: string; createdAt: Timestamp; };
type NewsItem = { id: string; title: string; content: string; image?: string; createdAt: Timestamp; authorId: string, authorName: string };
type Verse = { verse: string; text: string; };
type Message = { id: string; senderId: string; content?: string; type: 'text' | 'image' | 'video'; mediaUrl?: string; createdAt: Timestamp; status?: 'uploading' | 'failed'; tempId?: string; };

type LastMessage = {
    content: string;
    senderId: string;
    createdAt: Timestamp;
    type: 'text' | 'image' | 'video';
};

type Chat = { 
    id: string; 
    participantIds: string[]; 
    participants: { [key: string]: { name: string; avatar: string; } }; // Simplified participant info
    lastMessage?: LastMessage;
    lastRead?: { [key: string]: Timestamp };
    lastActivity?: Timestamp;
};

type Notification = {
    id: string;
    icon: string; // material symbol name
    message: string;
    timestamp: string;
};
type WorshipService = {
    id: string;
    isLive: boolean;
    twitchChannel: string;
    title: string;
    createdAt: Timestamp;
};

type PastWorshipService = {
    id: string;
    title: string;
    youtubeUrl: string;
    createdAt: Timestamp;
};


// --- Static Config & Data ---
const CHURCH: Church = {
    id: 'nepal_logos', name: 'Logos Church, Nepal', logo: '/logos-church-new-logo.jpg',
    offeringDetails: { qrCodeUrl: '/logos-qr-code.png', bankName: 'Global IME Bank', accountHolder: 'YAM PRADHAN', accountNumber: '10507010042662' },
};

const MOCK_VERSES_OF_THE_DAY: Verse[] = [
    { verse: 'यूहन्ना ३:१६', text: 'किनभने परमेश्‍वरले संसारलाई यति साह्रो प्रेम गर्नुभयो, कि उहाँले आफ्‍ना एकमात्र पुत्र दिनुभयो, ताकि उहाँमाथि विश्‍वास गर्ने कोही पनि नाश नहोस्, तर त्‍यसले अनन्त जीवन पाओस्।' },
    { verse: 'फिलिप्पी ४:१३', text: 'जसले मलाई शक्ति दिनuहुन्छ, उहाँमा म सब कुरा गर्न सक्छु।' },
    { verse: 'रोमी ८:२८', text: 'हामी जान्दछौं, कि परमेश्‍वरलाई प्रेम गर्नेहरूका निम्ति, अर्थात् उहाँको अभिप्रायअनुसार बोलाइएकाहरूका निम्ति हरेक कुरामा परमेश्‍वरले भलाइ नै गर्नुहुन्छ।' },
    { verse: 'यशैया ४१:१०', text: 'नडरा, किनभने म तँसँग छु। निरुत्साहित नहो, किनभने म तेरो परमेश्‍वर हुँ। म तँलाई बलियो पार्नेछु, म तँलाई सहायता गर्नेछु, म तँलाई मेरो धार्मिकताको दाहिने हातले समाल्नेछु।' },
    { verse: 'भजनसंग्रह २३:१', text: 'परमप्रभु मेरो गोठालो हुनुहुन्छ, मलाई केही कुराको अभाव हुनेछैन।' },
    { verse: 'यर्मिया २९:११', text: 'किनभने मैले तिमीहरूका निम्ति बनाएका योजनाहरू म जान्दछु,” परमप्रभु भन्नुहुन्छ, “तिमीहरूलाई हानि गर्ने होइन, तर उन्नति गर्ने योजनाहरू, तिमीहरूलाई आशा र भविष्य दिने योजनाहरू।' },
    { verse: 'मत्ती ११:२८', text: 'हे सबै थाकेका र बोझले दबिएका हो, मकहाँ आओ, र म तिमीहरूलाई विश्राम दिनेछु।' },
    { verse: 'हितोपदेश ३:५-६', text: 'तेरो सारा हृदयले परमप्रभुमाथि भरोसा राख्, र तेरो आफ्नै समझशक्तिमाथि भर नपर्। तेरा सबै मार्गहरूमा उहाँलाई स्वीकार गर्, र उहाँले तेरा मार्गहरू सोझो बनाउनुहुनेछ।' },
    { verse: '२ तिमोथी १:७', text: 'किनभने परमेश्‍वरले हामीलाई डरको आत्मा दिनुभएको छैन, तर शक्ति, प्रेम र आत्मसंयमको आत्मा दिनुभएको छ।' },
    { verse: 'यहोशू १:९', text: 'के मैले तँलाई आज्ञा दिएको छैनँ र? बलियो र साहसी हो। नडरा, न त निरुत्साहित हो, किनभने तँ जहाँ गए पनि परमप्रभु तेरा परमेश्‍वर तँसँग हुनुहुन्छ।' },
    { verse: 'भजनसंग्रह ४६:१', text: 'परमेश्‍वर हाम्रा शरणस्थान र बल हुनुहुन्छ, सङ्कष्टमा तुरुन्तै पाइने सहायक।' },
    { verse: 'मत्ती ६:३३', text: 'तर पहिले उहाँको राज्य र उहाँको धार्मिकताको खोजी गर, र यी सबै कुरा तिमीहरूलाई थपिनेछन्।' },
    { verse: 'गलाती ५:२२-२३', text: 'तर पवित्र आत्माको फलचाहिँ प्रेम, आनन्द, शान्ति, धैर्य, दया, भलाइ, विश्वस्तता, नम्रता र आत्मसंयम हो।' },
    { verse: 'हिब्रू ११:१', text: 'अब विश्वासचाहिँ आशा राखिएका कुराहरूको निश्चय र नदेखिएका कुराहरूको प्रमाण हो।' },
    { verse: 'रोमी १०:९', text: 'यदि तपाईंले आफ्नो मुखले “येशू नै प्रभु हुनुहुन्छ” भनी स्वीकार गर्नुभयो र परमेश्वरले उहाँलाई मरेकाहरूबाट जीवित पार्नुभयो भनी आफ्नो हृदयमा विश्वास गर्नुभयो भने तपाईंले उद्धार पाउनुहुनेछ।' },
    { verse: 'भजनसंग्रह १:१-२', text: 'धन्य हो त्यो मानिस, जो दुष्टहरूको सल्लाहमा हिँड्दैन, र पापीहरूको मार्गमा खडा हुँदैन, र गिल्ला गर्नेहरूको संगतमा बस्दैन। तर त्यसको खुशी परमप्रभुको व्यवस्थामा रहन्छ, र त्यसले दिनरात उहाँको व्यवस्थामा ध्यान गर्छ।' },
    { verse: 'यशैया ४०:३१', text: 'तर परमप्रभुमा आशा राख्नेहरूले नयाँ शक्ति प्राप्त गर्नेछन्। तिनीहरू गरुडझैं पखेटा लाएर माथि उड्नेछन्। तिनीहरू दगुरेर जानेछन् र थकित हुनेछैनन्, तिनीहरू हिँड्नेछन् र मूर्छित हुनेछैनन्।' },
    { verse: '१ कोरिन्थी १०:१३', text: 'तिमीहरूमाथि आइपरेको कुनै पनि परीक्षा मानिसलाई साधारणतया आइपर्नेभन्दा बाहिरको छैन। र परमेश्वर विश्वासयोग्य हुनुहुन्छ। उहाँले तिमीहरूलाई तिमीहरूको शक्तिभन्दा बाहिरको परीक्षामा पर्न दिनुहुनेछैन।' },
    { verse: 'एफिसी २:८-९', text: 'किनभने अनुग्रहबाट विश्वासद्वारा तिमीहरूले उद्धार पाएका छौ—र यो तिमीहरू आफैबाट होइन, यो परमेश्वरको वरदान हो—कर्महरूद्वारा होइन, ताकि कसैले घमण्ड गर्न नपाओस्।' },
    { verse: 'भजनसंग्रह ३७:४', text: 'परमप्रभुमा आनन्दित हो, र उहाँले तेरो हृदयका इच्छाहरू पूरा गर्नुहुनेछ।' },
    { verse: '२ कोरिन्थी ५:१७', text: 'यसकारण, यदि कोही ख्रीष्टमा छ भने, ऊ नयाँ सृष्टि हो। पुरानो बितिगएको छ, हेर, नयाँ आएको छ!' },
    { verse: 'हितोपदेश २२:६', text: 'बालकलाई त्यसको हिँड्नुपर्ने बाटोमा तालिम दे, र ऊ बूढो हुँदा पनि त्यसबाट तर्कनेछैन।' },
    { verse: 'भजनसंग्रह ११९:१०५', text: 'तपाईंको वचन मेरो खुट्टाको निम्ति बत्ती, र मेरो बाटोको निम्ति उज्यालो हो।' }
];

const MCCHEYNE_READING_PLAN = [
    "उत्पत्ति १, मत्ती १, एज्रा १, प्रेरित १",
    "उत्पत्ति २, मत्ती २, एज्रा २, प्रेरित २",
    "उत्पत्ति ३, मत्ती ३, एज्रा ३, प्रेरित ३",
    "उत्पत्ति ४, मत्ती ४, एज्रा ४, प्रेरित ४",
    "उत्पत्ति ५, मत्ती ५, एज्रा ५, प्रेरित ५",
    "उत्पत्ति ६, मत्ती ६, एज्रा ६, प्रेरित ६",
    "उत्पत्ति ७, मत्ती ७, एज्रा ७, प्रेरित ७",
    "उत्पत्ति ८, मत्ती ८, एज्रा ८, प्रेरित ८",
    "उत्पत्ति ९, मत्ती ९, एज्रा ९, प्रेरित ९",
    "उत्पत्ति १०, मत्ती १०, एज्रा १०, प्रेरित १०",
    "उत्पत्ति ११, मत्ती ११, नहेम्याह १, प्रेरित ११",
    "उत्पत्ति १२, मत्ती १२, नहेम्याह २, प्रेरित १२",
    "उत्पत्ति १३, मत्ती १३, नहेम्याह ३, प्रेरित १३",
    "उत्पत्ति १४, मत्ती १४, नहेम्याह ४, प्रेरित १४",
    "उत्पत्ति १५, मत्ती १५, नहेम्याह ५, प्रेरित १५",
    "उत्पत्ति १६, मत्ती १६, नहेम्याह ६, प्रेरित १६",
    "उत्पत्ति १७, मत्ती १७, नहेम्याह ७, प्रेरित १७",
    "उत्पत्ति १८, मत्ती १८, नहेम्याह ८, प्रेरित १८",
    "उत्पत्ति १९, मत्ती १९, नहेम्याह ९, प्रेरित १९",
    "उत्पत्ति २०, मत्ती २०, नहेम्याह १०, प्रेरित २०",
    "उत्पत्ति २१, मत्ती २१, नहेम्याह ११, प्रेरित २१",
    "उत्पत्ति २२, मत्ती २२, नहेम्याह १२, प्रेरित २२",
    "उत्पत्ति २३, मत्ती २३, नहेम्याह १३, प्रेरित २३",
    "उत्पत्ति २४, मत्ती २४, एस्तर १, प्रेरित २४",
    "उत्पत्ति २५, मत्ती २५, एस्तर २, प्रेरित २५",
    "उत्पत्ति २६, मत्ती २६, एस्तर ३, प्रेरित २६",
    "उत्पत्ति २७, मत्ती २७, एस्तर ४, प्रेरित २७",
    "उत्पत्ति २८, मत्ती २८, एस्तर ५, प्रेरित २८",
    "उत्पत्ति २९, मर्कूस १, एस्तर ६, रोमी १",
    "उत्पत्ति ३०, मर्कूस २, एस्तर ७, रोमी २",
    "उत्पत्ति ३१, मर्कूस ३, एस्तर ८, रोमी ३",
    "उत्पत्ति ३२, मर्कूस ४, एस्तर ९, रोमी ४",
    "उत्पत्ति ३३, मर्कूस ५, एस्तर १०, रोमी ५",
    "उत्पत्ति ३४, मर्कूस ६, अय्यूब १, रोमी ६",
    "उत्पत्ति ३५, मर्कूस ७, अय्यूब २, रोमी ७",
    "उत्पत्ति ३६, मर्कूस ८, अय्यूब ३, रोमी ८",
    "उत्पत्ति ३७, मर्कूस ९, अय्यूब ४, रोमी ९",
    "उत्पत्ति ३८, मर्कूस १०, अय्यूब ५, रोमी १०",
    "उत्पत्ति ३९, मर्कूस ११, अय्यूब ६, रोमी ११",
    "उत्पत्ति ४०, मर्कूस १२, अय्यूब ७, रोमी १२",
    "उत्पत्ति ४१, मर्कूस १३, अय्यूब ८, रोमी १३",
    "उत्पत्ति ४२, मर्कूस १४, अय्यूब ९, रोमी १४",
    "उत्पत्ति ४३, मर्कूस १५, अय्यूब १०, रोमी १५",
    "उत्पत्ति ४४, मर्कूस १६, अय्यूब ११, रोमी १६",
    "उत्पत्ति ४५, लूका १:१-३८, अय्यूब १२, १ कोरिन्थी १",
    "उत्पत्ति ४६, लूका १:३९-८०, अय्यूब १३, १ कोरिन्थी २",
    "उत्पत्ति ४७, लूका २:१-२४, अय्यूब १४, १ कोरिन्थी ३",
    "उत्पत्ति ४८, लूका २:२५-५२, अय्यूब १५, १ कोरिन्थी ४",
    "उत्पत्ति ४९, लूका ३, अय्यूब १६, १ कोरिन्थी ५",
    "उत्पत्ति ५०, लूका ४:१-३०, अय्यूब १७, १ कोरिन्थी ६",
    "प्रस्थान १, लूका ४:३१-४४, अय्यूब १८, १ कोरिन्थी ७",
    "प्रस्थान २, लूका ५:१-१६, अय्यूब १९, १ कोरिन्थी ८",
    "प्रस्थान ३, लूका ५:१७-३९, अय्यूब २०, १ कोरिन्थी ९",
    "प्रस्थान ४, लूका ६:१-१९, अय्यूब २१, १ कोरिन्थी १०",
    "प्रस्थान ५, लूका ६:२०-४९, अय्यूब २२, १ कोरिन्थी ११",
    "प्रस्थान ६, लूका ७:१-२३, अय्यूब २३, १ कोरिन्थी १२",
    "प्रस्थान ७, लूका ७:२४-५०, अय्यूब २४, १ कोरिन्थी १३",
    "प्रस्थान ८, लूका ८:१-२५, अय्यूब २५, १ कोरिन्थी १४",
    "प्रस्थान ९, लूका ८:२६-५६, अय्यूब २६, १ कोरिन्थी १५",
    "प्रस्थान १०, लूका ९:१-१८, अय्यूब २७, १ कोरिन्थी १६",
    "प्रस्थान ११, लूका ९:१९-३६, अय्यूब २८, २ कोरिन्थी १",
    "प्रस्थान १२, लूका ९:३७-६२, अय्यूब २९, २ कोरिन्थी २",
    "प्रस्थान १३, लूका १०:१-२४, अय्यूब ३०, २ कोरिन्थी ३",
    "प्रस्थान १४, लूका १०:२५-४२, अय्यूब ३१, २ कोरिन्थी ४",
    "प्रस्थान १५, लूका ११:१-२८, अय्यूब ३२, २ कोरिन्थी ५",
    "प्रस्थान १६, लूका ११:२९-５４, अय्यूब ३३, २ कोरिन्थी ६",
    "प्रस्थान १७, लूका १२:१-३४, अय्यूब ३४, २ कोरिन्थी ७",
    "प्रस्थान १८, लूका १२:३५-५९, अय्यूब ३५, २ कोरिन्थी ८",
    "प्रस्थान १९, लूका १३, अय्यूब ३६, २ कोरिन्थी ९",
    "प्रस्थान २०, लूका १४:१-२४, अय्यूब ३७, २ कोरिन्थी १०",
    "प्रस्थान २१, लूका १४:२५-३५, अय्यूब ३८, २ कोरिन्थी ११",
    "प्रस्थान २२, लूका १५, अय्यूब ३९, २ कोरिन्थी १२",
    "प्रस्थान २३, लूका १६, अय्यूब ४०, २ कोरिन्थी १३",
    "प्रस्थान २४, लूका १७:१-१९, अय्यूब ४१, गलाती १",
    "प्रस्थान २५, लूका १७:२०-३७, अय्यूब ४२, गलाती २",
    "प्रस्थान २६, लूका १८:१-१८, भजनसंग्रह १-२, गलाती ३",
    "प्रस्थान २७, लूका १८:१९-४३, भजनसंग्रह ३-४, गलाती ४",
    "प्रस्थान २८, लूका १९:१-२७, भजनसंग्रह ५-६, गलाती ५",
    "प्रस्थान २९, लूका १९:२८-४८, भजनसंग्रह ७, गलाती ६",
    "प्रस्थान ३०, लूका २०:१-१९, भजनसंग्रह ८, एफिसी १",
    "प्रस्थान ३१, लूका २०:२०-४७, भजनसंग्रह ९, एफिसी २",
    "प्रस्थान ३२, लूका २१, भजनसंग्रह १०, एफिसी ३",
    "प्रस्थान ३३, लूका २२:१-३०, भजनसंग्रह ११-१२, एफिसी ४",
    "प्रस्थान ३४, लूका २२:३१-५३, भजनसंग्रह १३-१४, एफिसी ५",
    "प्रस्थान ३५, लूका २२:५४-७१, भजनसंग्रह १५-१६, एफिसी ६",
    "प्रस्थान ३६, लूका ২৩:१-२५, भजनसंग्रह १७, फिलिप्पी १",
    "प्रस्थान ३७, लूका २३:२६-५६, भजनसंग्रह १८, फिलिप्पी २",
    "प्रस्थान ३८, लूका २४:१-१२, भजनसंग्रह १९, फिलिप्पी ३",
    "प्रस्थान ३९, लूका २४:१३-५३, भजनसंग्रह २०, फिलिप्पी ४",
    "प्रस्थान ४०, यूहन्ना १:१-२८, भजनसंग्रह २१, कलस्सी १",
    "लेवी १, यूहन्ना १:२९-५१, भजनसंग्रह २२, कलस्सी २",
    "लेवी २, यूहन्ना २, भजनसंग्रह २३, कलस्सी ३",
    "लेवी ३, यूहन्ना ३:१-२१, भजनसंग्रह २४, कलस्सी ४",
    "लेवी ४, यूहन्ना ३:२२-३६, भजनसंग्रह २५, १ थिस्सलोनिकी १",
    "लेवी ५, यूहन्ना ४:१-३०, भजनसंग्रह २६, १ थिस्सलोनिकी २",
    "लेवी ६, यूहन्ना ४:३१-५४, भजनसंग्रह २७, १ थिस्सलोनिकी ३",
    "लेवी ७, यूहन्ना ५:१-२३, भजनसंग्रह २८, १ थिस्सलोनिकी ४",
    "लेवी ८, यूहन्ना ५:२४-४७, भजनसंग्रह २९, १ थिस्सलोनिकी ५",
    "लेवी ९, यूहन्ना ६:१-२१, भजनसंग्रह ३०, २ थिस्सलोनिकी १",
    "लेवी १०, यूहन्ना ६:२२-४०, भजनसंग्रह ३१, २ थिस्सलोनिकी २",
    "लेवी ११, यूहन्ना ६:४१-७१, भजनसंग्रह ३२, २ थिस्सलोनिकी ३",
    "लेवी १२, यूहन्ना ७:१-३१, भजनसंग्रह ३३, १ तिमोथी १",
    "लेवी १३, यूहन्ना ७:३२-५३, भजनसंग्रह ३४, १ तिमोथी २",
    "लेवी १४, यूहन्ना ८:१-३०, भजनसंग्रह ३५, १ तिमोथी ३",
    "लेवी १५, यूहन्ना ८:३१-५९, भजनसंग्रह ३६, १ तिमोथी ४",
    "लेवी १६, यूहन्ना ९, भजनसंग्रह ३७, १ तिमोथी ५",
    "लेवी १७, यूहन्ना १०:१-२१, भजनसंग्रह ३८, १ तिमोथी ६",
    "लेवी १८, यूहन्ना १०:२२-४२, भजनसंग्रह ३९, २ तिमोथी १",
    "लेवी १९, यूहन्ना ११:१-२७, भजनसंग्रह ४०, २ तिमोथी २",
    "लेवी २०, यूहन्ना ११:२८-५७, भजनसंग्रह ४१, २ तिमोथी ३",
    "लेवी २१, यूहन्ना १२:१-१९, भजनसंग्रह ४२, २ तिमोथी ४",
    "लेवी २२, यूहन्ना १२:२०-५०, भजनसंग्रह ४३, तीतस १",
    "लेवी २३, यूहन्ना १३, भजनसंग्रह ४४, तीतस २",
    "लेवी २४, यूहन्ना १४, भजनसंग्रह ४५, तीतस ३",
    "लेवी २५, यूहन्ना १५, भजनसंग्रह ४६, फिलेमोन १",
    "लेवी २६, यूहन्ना १६, भजनसंग्रह ४७, हिब्रू १",
    "लेवी २७, यूहन्ना १७, भजनसंग्रह ४८, हिब्रू २",
    "गन्ती १, यूहन्ना १८:१-२३, भजनसंग्रह ४९, हिब्रू ३",
    "गन्ती २, यूहन्ना १८:२४-४०, भजनसंग्रह ५०, हिब्रू ४",
    "गन्ती ३, यूहन्ना १९:१-२२, भजनसंग्रह ५१, हिब्रू ५",
    "गन्ती ४, यूहन्ना १९:२३-४२, भजनसंग्रह ५२, हिब्रू ६",
    "गन्ती ५, यूहन्ना २०, भजनसंग्रह ५३, हिब्रू ७",
    "गन्ती ६, यूहन्ना २१, भजनसंग्रह ५४, हिब्रू ८",
    "गन्ती ७, प्रेरित १, भजनसंग्रह ५५, हिब्रू ९",
    "गन्ती ८, प्रेरित २:१-२१, भजनसंग्रह ५६, हिब्रू १०",
    "गन्ती ९, प्रेरित २:२२-४७, भजनसंग्रह ५७, हिब्रू ११",
    "गन्ती १०, प्रेरित ३, भजनसंग्रह ५८, हिब्रू १२",
    "गन्ती ११, प्रेरित ४:१-२२, भजनसंग्रह ५९, हिब्रू १३",
    "गन्ती १२, प्रेरित ४:२३-३७, भजनसंग्रह ६०, याकूब १",
    "गन्ती १३, प्रेरित ५:१-१८, भजनसंग्रह ६१, याकूब २",
    "गन्ती १४, प्रेरित ५:१९-४२, भजनसंग्रह ६२, याकूब ३",
    "गन्ती १५, प्रेरित ६, भजनसंग्रह ६३, याकूब ४",
    "गन्ती १६, प्रेरित ७:१-२१, भजनसंग्रह ६४, याकूब ५",
    "गन्ती १७, प्रेरित ७:२२-४३, भजनसंग्रह ६५, १ पत्रुस १",
    "गन्ती १८, प्रेरित ७:४४-६०, भजनसंग्रह ६६, १ पत्रुस २",
    "गन्ती १९, प्रेरित ८:१-२५, भजनसंग्रह ६७, १ पत्रुस ३",
    "गन्ती २०, प्रेरित ८:२६-४०, भजनसंग्रह ६८, १ पत्रुस ४",
    "गन्ती २१, प्रेरित ९:१-२१, भजनसंग्रह ६९, १ पत्रुस ५",
    "गन्ती २२, प्रेरित ९:२२-४३, भजनसंग्रह ७०, २ पत्रुस १",
    "गन्ती २३, प्रेरित १०:१-२३, भजनसंग्रह ७１, २ पत्रुस २",
    "गन्ती २४, प्रेरित १०:२४-४८, भजनसंग्रह ७２, २ पत्रुस ३",
    "गन्ती २५, प्रेरित ११, भजनसंग्रह ७३, १ यूहन्ना १",
    "गन्ती २६, प्रेरित १२, भजनसंग्रह ७४, १ यूहन्ना २",
    "गन्ती २७, प्रेरित १३:१-२५, भजनसंग्रह ७५, १ यूहन्ना ३",
    "गन्ती २८, प्रेरित १३:२६-५२, भजनसंग्रह ७६, १ यूहन्ना ४",
    "गन्ती २९, प्रेरित १४, भजनसंग्रह ७७, १ यूहन्ना ५",
    "गन्ती ३०, प्रेरित १५:१-२१, हितोपदेश १, २ यूहन्ना १",
    "गन्ती ३१, प्रेरित १५:२२-४१, हितोपदेश २, ३ यूहन्ना १",
    "गन्ती ३२, प्रेरित १६, हितोपदेश ३, यहूदा १",
    "गन्ती ३३, प्रेरित १७:१-१५, हितोपदेश ४, प्रकाश १",
    "गन्ती ३४, प्रेरित १७:१६-३४, हितोपदेश ५, प्रकाश २",
    "गन्ती ३५, प्रेरित १८, हितोपदेश ६, प्रकाश ३",
    "गन्ती ३६, प्रेरित १९, हितोपदेश ७, प्रकाश ४",
    "व्यवस्था १, प्रेरित २०:१-१६, हितोपदेश ८, प्रकाश ५",
    "व्यवस्था २, प्रेरित २०:१७-३८, हितोपदेश ९, प्रकाश ६",
    "व्यवस्था ३, प्रेरित २१:१-१८, उपदेशक १, प्रकाश ७",
    "व्यवस्था ४, प्रेरित २१:१९-४३, उपदेशक २, प्रकाश ८",
    "व्यवस्था ५, प्रेरित २२, उपदेशक ३, प्रकाश ९",
    "व्यवस्था ६, प्रेरित २३, उपदेशक ४, प्रकाश १०",
    "व्यवस्था ७, प्रेरित २४, उपदेशक ५, प्रकाश ११",
    "व्यवस्था ८, प्रेरित २५, उपदेशक ६, प्रकाश १२",
    "व्यवस्था ९, प्रेरित २६, उपदेशक ७, प्रकाश १३",
    "व्यवस्था १०, प्रेरित २७, उपदेशक ८, प्रकाश १४",
    "व्यवस्था ११, प्रेरित २८, उपदेशक ९, प्रकाश १५",
    "व्यवस्था १२, रोमी १, उपदेशक १०, प्रकाश १६",
    "व्यवस्था १३, रोमी २, उपदेशक ११, प्रकाश १७",
    "व्यवस्था १४, रोमी ३, उपदेशक १२, प्रकाश १८",
    "व्यवस्था १५, रोमी ४, श्रेष्ठगीत १, प्रकाश १९",
    "व्यवस्था १६, रोमी ५, श्रेष्ठगीत २, प्रकाश २०",
    "व्यवस्था १७, रोमी ६, श्रेष्ठगीत ३, प्रकाश २१",
    "व्यवस्था १८, रोमी ७, श्रेष्ठगीत ४, प्रकाश २२",
    "व्यवस्था १९, रोमी ८:१-१८, श्रेष्ठगीत ५, यशैया १",
    "व्यवस्था २०, रोमी ८:१९-३९, श्रेष्ठगीत ६, यशैया २",
    "व्यवस्था २१, रोमी ९, श्रेष्ठगीत ७, यशैया ३",
    "व्यवस्था २२, रोमी १०, श्रेष्ठगीत ८, यशैया ४",
    "व्यवस्था २३, रोमी ११:१-२४, यशैया १, यशैया ५",
    "व्यवस्था २४, रोमी ११:२५-३६, यशैया २, यशैया ६",
    "व्यवस्था २५, रोमी १२, यशैया ३, यशैया ७",
    "व्यवस्था २६, रोमी १३, यशैया ४, यशैया ८",
    "व्यवस्था २७, रोमी १४, यशैया ५, यशैया ९",
    "व्यवस्था २८, रोमी १५:१-१८, यशैया ६, यशैया १०",
    "व्यवस्था २९, रोमी १५:१९-३३, यशैया ७, यशैया ११",
    "व्यवस्था ३०, रोमी १६, यशैया ८, यशैया १२",
    "व्यवस्था ३१, १ कोरिन्थी १, यशैया ९, यशैया १३",
    "व्यवस्था ३२, १ कोरिन्थी २, यशैया १०, यशैया १४",
    "व्यवस्था ३३, १ कोरिन्थी ३, यशैया ११, यशैया १५",
    "व्यवस्था ३४, १ कोरिन्थी ४, यशैया १२, यशैया १६",
    "यहोशू १, १ कोरिन्थी ५, यशैया १३, यशैया १७",
    "यहोशू २, १ कोरिन्थी ६, यशैया १४, यशैया १८",
    "यहोशू ३, १ कोरिन्थी ७, यशैया १५, यशैया १९",
    "यहोशू ४, १ कोरिन्थी ८, यशैया १६, यशैया २०",
    "यहोशू ५, १ कोरिन्थी ९, यशैया १७, यशैया २१",
    "यहोशू ६, १ कोरिन्थी १०, यशैया १८, यशैया २२",
    "यहोशू ७, १ कोरिन्थी ११, यशैया १९, यशैया २३",
    "यहोशू ८, १ कोरिन्थी १२, यशैया २०, यशैया २४",
    "यहोशू ९, १ कोरिन्थी १३, यशैया २१, यशैया २५",
    "यहोशू १०, १ कोरिन्थी १४, यशैया २२, यशैया २६",
    "यहोशू ११, १ कोरिन्थी १५, यशैया २३, यशैया २७",
    "यहोशू १२, १ कोरिन्थी १६, यशैया २४, यशैया २८",
    "यहोशू १३, २ कोरिन्थी १, यशैया २५, यशैया २९",
    "यहोशू १४, २ कोरिन्थी २, यशैया २६, यशैया ३०",
    "यहोशू १५, २ कोरिन्थी ३, यशैया २७, यशैया ३१",
    "यहोशू १६, २ कोरिन्थी ४, यशैया २८, यशैया ३२",
    "यहोशू १७, २ कोरिन्थी ५, यशैया २९, यशैया ३३",
    "यहोशू १८, २ कोरिन्थी ६, यशैया ३०, यशैया ३४",
    "यहोशू १९, २ कोरिन्थी ७, यशैया ३१, यशैया ३५",
    "यहोशू २०, २ कोरिन्थी ८, यशैया ३２, यशैया ३६",
    "यहोशू २१, २ कोरिन्थी ९, यशैया ३३, यशैया ३७",
    "यहोशू २२, २ कोरिन्थी १०, यशैया ३４, यशैया ३८",
    "यहोशू २३, २ कोरिन्थी ११, यशैया ३५, यशैया ३९",
    "यहोशू २४, २ कोरिन्थी १२, यशैया ३６, यशैया ४०",
    "न्यायकर्ता १, २ कोरिन्थी १३, यशैया ३７, यशैया ४१",
    "न्यायकर्ता २, गलाती १, यशैया ३८, यशैया ४२",
    "न्यायकर्ता ३, गलाती २, यशैया ३९, यशैया ४३",
    "न्यायकर्ता ४, गलाती ३, यशैया ४०, यशैया ४४",
    "न्यायकर्ता ५, गलाती ४, यर्मिया १, यशैया ४५",
    "न्यायकर्ता ६, गलाती ५, यर्मिया २, यशैया ४６",
    "न्यायकर्ता ७, गलाती ६, यर्मिया ३, यशैया ४७",
    "न्यायकर्ता ८, एफिसी १, यर्मिया ४, यशैया ४८",
    "न्यायकर्ता ९, एफिसी २, यर्मिया ५, यशैया ४९",
    "न्यायकर्ता १०, एफिसी ३, यर्मिया ६, यशैया ५०",
    "न्यायकर्ता ११, एफिसी ४, यर्मिया ७, यशैया ५१",
    "न्यायकर्ता १२, एफिसी ५, यर्मिया ८, यशैया ५२",
    "न्यायकर्ता १३, एफिसी ६, यर्मिया ९, यशैया ५३",
    "न्यायकर्ता १४, फिलिप्पी १, यर्मिया १०, यशैया ५４",
    "न्यायकर्ता १५, फिलिप्पी २, यर्मिया ११, यशैया ५５",
    "न्यायकर्ता १६, फिलिप्पी ३, यर्मिया १२, यशैया ५６",
    "न्यायकर्ता १७, फिलिप्पी ४, यर्मिया १३, यशैया ५７",
    "न्यायकर्ता १८, कलस्सी १, यर्मिया १४, यशैया ५८",
    "न्यायकर्ता १९, कलस्सी २, यर्मिया १५, यशैया ५९",
    "न्यायकर्ता २०, कलस्सी ३, यर्मिया १६, यशैया ६०",
    "न्यायकर्ता २१, कलस्सी ४, यर्मिया १७, यशैया ६१",
    "रूथ १, १ थिस्सलोनिकी १, यर्मिया १८, यशैया ६२",
    "रूथ २, १ थिस्सलोनिकी २, यर्मिया १९, यशैया ६३",
    "रूथ ३, १ थिस्सलोनिकी ३, यर्मिया २०, यशैया ६４",
    "रूथ ४, १ थिस्सलोनिकी ४, यर्मिया २१, यशैया ६५",
    "१ शमूएल १, १ थिस्सलोनिकी ५, यर्मिया २२, यशैया ६６",
    "१ शमूएल २, २ थिस्सलोनिकी १, यर्मिया २३, विलाप १",
    "१ शमूएल ३, २ थिस्सलोनिकी २, यर्मिया २४, विलाप २",
    "१ शमूएल ४, २ थिस्सलोनिकी ३, यर्मिया २५, विलाप ३",
    "१ शमूएल ५, १ तिमोथी १, यर्मिया २६, विलाप ४",
    "१ शमूएल ६, १ तिमोथी २, यर्मिया २७, विलाप ५",
    "१ शमूएल ७, १ तिमोथी ३, यर्मिया २८, इजकिएल १",
    "१ शमूएल ८, १ तिमोथी ४, यर्मिया २९, इजकिएल २",
    "१ शमूएल ९, १ तिमोथी ५, यर्मिया ३०, इजकिएल ३",
    "१ शमूएल १०, १ तिमोथी ६, यर्मिया ३१, इजकिएल ४",
    "१ शमूएल ११, २ तिमोथी १, यर्मिया ३２, इजकिएल ५",
    "१ शमूएल १२, २ तिमोथी २, यर्मिया ३３, इजकिएल ६",
    "१ शमूएल १३, २ तिमोथी ३, यर्मिया ३４, इजकिएल ७",
    "१ शमूएल १४, २ तिमोथी ४, यर्मिया ३５, इजकिएल ८",
    "१ शमूएल १५, तीतस १, यर्मिया ३６, इजकिएल ९",
    "१ शमूएल १६, तीतस २, यर्मिया ३７, इजकिएल १०",
    "१ शमूएल १७, तीतस ३, यर्मिया ३８, इजकिएल ११",
    "१ शमूएल १८, फिलेमोन १, यर्मिया ३９, इजकिएल १२",
    "१ शमूएल १९, हिब्रू १, यर्मिया ४०, इजकिएल १३",
    "१ शमूएल २०, हिब्रू २, यर्मिया ४१, इजकिएल १४",
    "१ शमूएल २१, हिब्रू ३, यर्मिया ४２, इजकिएल १५",
    "१ शमूएल २२, हिब्रू ४, यर्मिया ४３, इजकिएल १६",
    "१ शमूएल २३, हिब्रू ५, यर्मिया ४４, इजकिएल १७",
    "१ शमूएल २४, हिब्रू ६, यर्मिया ४５, इजकिएल १८",
    "१ शमूएल २५, हिब्रू ७, यर्मिया ४６, इजकिएल १९",
    "१ शमूएल २६, हिब्रू ८, यर्मिया ४７, इजकिएल २०",
    "१ शमूएल २７, हिब्रू ९, यर्मिया ४８, इजकिएल २१",
    "१ शमूएल २८, हिब्रू १०, यर्मिया ४９, इजकिएल २२",
    "१ शमूएल २९, हिब्रू ११, यर्मिया ५０, इजकिएल २३",
    "१ शमूएल ३०, हिब्रू १२, यर्मिया ५１, इजकिएल २४",
    "१ शमूएल ३१, हिब्रू १३, यर्मिया ५２, इजकिएल २५",
    "२ शमूएल १, याकूब १, दानिएल १, इजकिएल २६",
    "२ शमूएल २, याकूब २, दानिएल २, इजकिएल २７",
    "२ शमूएल ३, याकूब ३, दानिएल ३, इजकिएल २८",
    "२ शमूएल ४, याकूब ४, दानिएल ४, इजकिएल २९",
    "२ शमूएल ५, याकूब ५, दानिएल ५, इजकिएल ३０",
    "२ शमूएल ६, १ पत्रुस १, दानिएल ६, इजकिएल ३１",
    "२ शमूएल ७, १ पत्रुस २, दानिएल ७, इजकिएल ३２",
    "२ शमूएल ८, १ पत्रुस ३, दानिएल ८, इजकिएल ३３",
    "२ शमूएल ९, १ पत्रुस ४, दानिएल ९, इजकिएल ३４",
    "२ शमूएल १०, १ पत्रुस ५, दानिएल १०, इजकिएल ३５",
    "२ शमूएल ११, २ पत्रुस १, दानिएल ११, इजकिएल ३６",
    "२ शमूएल १२, २ पत्रुस २, दानिएल १२, इजकिएल ३７",
    "२ शमूएल १३, २ पत्रुस ३, होशे १, इजकिएल ३８",
    "२ शमूएल १४, १ यूहन्ना १, होशे २, इजकिएल ३９",
    "२ शमूएल १५, १ यूहन्ना २, होशे ३, इजकिएल ४०",
    "२ शमूएल १६, १ यूहन्ना ३, होशे ४, इजकिएल ४１",
    "२ शमूएल १७, १ यूहन्ना ४, होशे ५, इजकिएल ४２",
    "२ शमूएल १८, १ यूहन्ना ५, होशे ६, इजकिएल ४３",
    "२ शमूएल १९, २ यूहन्ना १, होशे ७, इजकिएल ४４",
    "२ शमूएल २०, ३ यूहन्ना १, होशे ८, इजकिएल ४５",
    "२ शमूएल २१, यहूदा १, होशे ९, इजकिएल ४６",
    "२ शमूएल २２, प्रकाश १, होशे १०, इजकिएल ४７",
    "२ शमूएल २३, प्रकाश २, होशे ११, इजकिएल ४８",
    "२ शमूएल २४, प्रकाश ३, होशे १२, योएल १",
    "१ राजा १, प्रकाश ४, होशे १३, योएल २",
    "१ राजा २, प्रकाश ५, होशे १४, योएल ३",
    "१ राजा ३, प्रकाश ६, आमोस १, आमोस २",
    "१ राजा ४, प्रकाश ७, आमोस ३, आमोस ४",
    "१ राजा ५, प्रकाश ८, आमोस ५, आमोस ६",
    "१ राजा ६, प्रकाश ९, आमोस ७, आमोस ८",
    "१ राजा ७, प्रकाश १०, आमोस ९, ओबद्या १",
    "१ राजा ८, प्रकाश ११, योना १, योना २",
    "१ राजा ९, प्रकाश १२, योना ३, योना ४",
    "१ राजा १०, प्रकाश १३, मीका १, मीका २",
    "१ राजा ११, प्रकाश १४, मीका ३, मीका ४",
    "१ राजा १२, प्रकाश १५, मीका ५, मीका ६",
    "१ राजा १३, प्रकाश १६, मीका ७, नहूम १",
    "१ राजा १४, प्रकाश १७, नहूम २, नहूम ३",
    "१ राजा १५, प्रकाश १८, हबकूक १, हबकूक २",
    "१ राजा १६, प्रकाश १९, हबकूक ३, सपन्याह १",
    "१ राजा १७, प्रकाश २०, सपन्याह २, सपन्याह ३",
    "१ राजा १८, प्रकाश २१, हाग्गै १, हाग्गै २",
    "१ राजा १९, प्रकाश २२, जकरिया १, जकरिया २",
    "१ राजा २०, मत्ती १, जकरिया ३, जकरिया ४",
    "१ राजा २१, मत्ती २, जकरिया ५, जकरिया ६",
    "१ राजा २२, मत्ती ३, जकरिया ७, जकरिया ८",
    "२ राजा १, मत्ती ४, जकरिया ९, जकरिया १०",
    "२ राजा २, मत्ती ५, जकरिया ११, जकरिया १२",
    "२ राजा ३, मत्ती ६, जकरिया १३, जकरिया १४",
    "२ राजा ४, मत्ती ७, मलाकी १, मलाकी २",
    "२ राजा ५, मत्ती ८, मलाकी ३, मलाकी ४",
    "२ राजा ६, मत्ती ९, भजनसंग्रह १-२, भजनसंग्रह ३",
    "२ राजा ७, मत्ती १०, भजनसंग्रह ४-५, भजनसंग्रह ६",
    "२ राजा ८, मत्ती ११, भजनसंग्रह ७, भजनसंग्रह ८",
    "२ राजा ९, मत्ती १२, भजनसंग्रह ९, भजनसंग्रह १०",
    "२ राजा १०, मत्ती १३, भजनसंग्रह ११-१२, भजनसंग्रह १३",
    "२ राजा ११, मत्ती १४, भजनसंग्रह १४, भजनसंग्रह १५",
    "२ राजा १२, मत्ती १५, भजनसंग्रह १६, भजनसंग्रह १७",
    "२ राजा १३, मत्ती १६, भजनसंग्रह १८, भजनसंग्रह १९",
    "२ राजा १४, मत्ती १७, भजनसंग्रह २०, भजनसंग्रह २१",
    "२ राजा १५, मत्ती १८, भजनसंग्रह २२, भजनसंग्रह २३",
    "२ राजा १६, मत्ती १९, भजनसंग्रह २४, भजनसंग्रह २५",
    "२ राजा १७, मत्ती २०, भजनसंग्रह २६, भजनसंग्रह २७",
    "२ राजा १८, मत्ती २१, भजनसंग्रह २८, भजनसंग्रह २९",
    "२ राजा १९, मत्ती २２, भजनसंग्रह ३०, भजनसंग्रह ३１",
    "२ राजा २०, मत्ती २３, भजनसंग्रह ३２, भजनसंग्रह ३３",
    "२ राजा २१, मत्ती २४, भजनसंग्रह ३４, भजनसंग्रह ३５",
    "२ राजा २２, मत्ती २५, भजनसंग्रह ३６, भजनसंग्रह ३７",
    "२ राजा २३, मत्ती २６, भजनसंग्रह ३８, भजनसंग्रह ३９",
    "२ राजा २४, मत्ती २７, भजनसंग्रह ४०, भजनसंग्रह ४１",
    "२ राजा २५, मत्ती २８, भजनसंग्रह ४２, भजनसंग्रह ४３",
    "१ इतिहास १, मर्कूस १, भजनसंग्रह ४４, भजनसंग्रह ४５",
    "१ इतिहास २, मर्कूस २, भजनसंग्रह ४６, भजनसंग्रह ४７",
    "१ इतिहास ३, मर्कूस ३, भजनसंग्रह ४８, भजनसंग्रह ४९",
    "१ इतिहास ४, मर्कूस ४, भजनसंग्रह ५０, भजनसंग्रह ५１",
    "१ इतिहास ५, मर्कूस ५, भजनसंग्रह ५２, भजनसंग्रह ५３",
    "१ इतिहास ६, मर्कूस ६, भजनसंग्रह ५４, भजनसंग्रह ५５",
    "१ इतिहास ७, मर्कूस ७, भजनसंग्रह ५６, भजनसंग्रह ५７",
    "१ इतिहास ८, मर्कूस ८, भजनसंग्रह ५８, भजनसंग्रह ५９",
    "१ इतिहास ९, मर्कूस ९, भजनसंग्रह ६０, भजनसंग्रह ६１",
    "१ इतिहास १०, मर्कूस १०, भजनसंग्रह ६２, भजनसंग्रह ६３",
    "१ इतिहास ११, मर्कूस ११, भजनसंग्रह ६４, भजनसंग्रह ६５",
    "१ इतिहास १२, मर्कूस १२, भजनसंग्रह ६６, भजनसंग्रह ६７",
    "१ इतिहास १३, मर्कूस १३, भजनसंग्रह ६８, भजनसंग्रह ६９",
    "१ इतिहास १४, मर्कूस १४, भजनसंग्रह ७０, भजनसंग्रह ७１",
    "१ इतिहास १५, मर्कूस १५, भजनसंग्रह ७２, भजनसंग्रह ७３",
    "१ इतिहास १६, मर्कूस १६, भजनसंग्रह ७４, भजनसंग्रह ७５",
    "१ इतिहास १७, लूका १:१-३८, भजनसंग्रह ७６, भजनसंग्रह ७７",
    "१ इतिहास १८, लूका १:३९-८０, हितोपदेश १०, भजनसंग्रह ७８",
    "१ इतिहास १९, लूका २, हितोपदेश ११, भजनसंग्रह ७９",
    "१ इतिहास २०, लूका ३, हितोपदेश १२, भजनसंग्रह ८０",
    "१ इतिहास २१, लूका ४, हितोपदेश १३, भजनसंग्रह ८１",
    "१ इतिहास २２, लूका ५, हितोपदेश १४, भजनसंग्रह ८２",
    "१ इतिहास २३, लूका ६, हितोपदेश १५, भजनसंग्रह ८３",
    "१ इतिहास २४, लूका ७, हितोपदेश १६, भजनसंग्रह ८４",
    "१ इतिहास २५, लूका ८, हितोपदेश १७, भजनसंग्रह ८５",
    "१ इतिहास २६, लूका ९, हितोपदेश १८, भजनसंग्रह ८６",
    "१ इतिहास २७, लूका १०, हितोपदेश १९, भजनसंग्रह ८７",
    "१ इतिहास २８, लूका ११, हितोपदेश २०, भजनसंग्रह ८８",
    "१ इतिहास २९, लूका १२, हितोपदेश २１, भजनसंग्रह ८９",
    "२ इतिहास १, लूका १३, हितोपदेश २２, भजनसंग्रह ९０",
    "२ इतिहास २, लूका १४, हितोपदेश २３, भजनसंग्रह ९１",
    "२ इतिहास ३, लूका १५, हितोपदेश २४, भजनसंग्रह ९２",
    "२ इतिहास ४, लूका १६, हितोपदेश २५, भजनसंग्रह ९３",
    "२ इतिहास ५, लूका १७, हितोपदेश २６, भजनसंग्रह ९４",
    "२ इतिहास ६, लूका १८, हितोपदेश २７, भजनसंग्रह ९５",
    "२ इतिहास ७, लूका १९, हितोपदेश २８, भजनसंग्रह ९６",
    "२ इतिहास ८, लूका २०, हितोपदेश २९, भजनसंग्रह ९７",
    "२ इतिहास ९, लूका २１, हितोपदेश ३０, भजनसंग्रह ९８",
    "२ इतिहास १०, लूका २２, हितोपदेश ३１, भजनसंग्रह ९９",
    "२ इतिहास ११, लूका २３, भजनसंग्रह १०४, भजनसंग्रह १००",
    "२ इतिहास १२, लूका २४, भजनसंग्रह १०５, भजनसंग्रह १०１",
    "२ इतिहास १३, यूहन्ना १, भजनसंग्रह १०６, भजनसंग्रह १०２",
    "२ इतिहास १४, यूहन्ना २, भजनसंग्रह १०７, भजनसंग्रह १०３",
    "२ इतिहास १५, यूहन्ना ३, भजनसंग्रह १०８, भजनसंग्रह १०９",
    "२ इतिहास १६, यूहन्ना ४, भजनसंग्रह १１０, भजनसंग्रह ११１",
    "२ इतिहास १७, यूहन्ना ५, भजनसंग्रह १１２, भजनसंग्रह ११３",
    "२ इतिहास १८, यूहन्ना ६, भजनसंग्रह १１４, भजनसंग्रह ११５",
    "२ इतिहास १९, यूहन्ना ७, भजनसंग्रह १１６, भजनसंग्रह ११７",
    "२ इतिहास २०, यूहन्ना ८, भजनसंग्रह १１８, भजनसंग्रह ११९:१-३２",
    "२ इतिहास २१, यूहन्ना ९, भजनसंग्रह ११९:३३-६４, भजनसंग्रह ११९:６５-९६",
    "२ इतिहास २２, यूहन्ना १०, भजनसंग्रह ११९:९७-१２８, भजनसंग्रह ११९:१２９-१５２",
    "२ इतिहास २३, यूहन्ना ११, भजनसंग्रह ११९:१５３-१７６, भजनसंग्रह १२०",
    "२ इतिहास २४, यूहन्ना १२, भजनसंग्रह १२１, भजनसंग्रह १२２",
    "२ इतिहास २५, यूहन्ना १३, भजनसंग्रह १२３, भजनसंग्रह १२４",
    "२ इतिहास २६, यूहन्ना १४, भजनसंग्रह १२５, भजनसंग्रह १२６",
    "२ इतिहास २७, यूहन्ना १५, भजनसंग्रह १२７, भजनसंग्रह १२８",
    "२ इतिहास २८, यूहन्ना १६, भजनसंग्रह १२９, भजनसंग्रह १३０",
    "२ इतिहास २९, यूहन्ना १७, भजनसंग्रह १३１, भजनसंग्रह १३２",
    "२ इतिहास ३０, यूहन्ना १८, भजनसंग्रह १३３, भजनसंग्रह १३４",
    "२ इतिहास ३１, यूहन्ना १९, भजनसंग्रह १३５, भजनसंग्रह १३６",
    "२ इतिहास ३２, यूहन्ना २०, भजनसंग्रह १३７, भजनसंग्रह १३８",
    "२ इतिहास ३३, यूहन्ना २１, भजनसंग्रह १३９, भजनसंग्रह १४０",
    "२ इतिहास ३４, प्रेरित १, भजनसंग्रह १४１, भजनसंग्रह १४２",
    "२ इतिहास ३５, प्रेरित २, भजनसंग्रह १४３, भजनसंग्रह १४４",
    "२ इतिहास ३６, प्रेरित ३, भजनसंग्रह १४５, भजनसंग्रह १४６",
    "एज्रा १, प्रेरित ४, भजनसंग्रह १४７, भजनसंग्रह १४８",
    "एज्रा २, प्रेरित ५, भजनसंग्रह १४９, भजनसंग्रह १५０",
];


// --- Helper Functions ---
const formatDate = (timestamp: Timestamp | Date | undefined): string => {
    if (!timestamp) return '';
    const date = (timestamp as Timestamp).toDate ? (timestamp as Timestamp).toDate() : (timestamp as Date);
    return date.toLocaleDateString('ne-NP', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
};
const formatTime = (timestamp: Timestamp | undefined): string => {
    if (!timestamp) return '';
    return timestamp.toDate().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
};
const formatRelativeTime = (timestamp: Timestamp | undefined): string => {
    if (!timestamp) return 'Just now';
    const now = new Date();
    const then = timestamp.toDate();
    const diffInSeconds = Math.floor((now.getTime() - then.getTime()) / 1000);

    if (diffInSeconds < 60) return `${diffInSeconds}s ago`;
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}d ago`;
    return formatDate(timestamp);
};
function getAvatarInitial(name: string | undefined | null): string {
    if (!name) return 'L';
    const parts = name.split(' ');
    if (parts.length > 1) {
        return `${parts[0][0]}${parts[parts.length - 1][0]}`.toUpperCase();
    }
    return name.substring(0, 1).toUpperCase();
}


// --- React Components ---

const ErrorFallback: React.FC<{ error: Error }> = ({ error }) => (
    <div className="error-container">
        <img src={CHURCH.logo} alt="Church Logo" className="error-logo" />
        <h2>Oops! Something went wrong.</h2>
        <p>We're sorry, but the application encountered an unexpected error. Please try again later.</p>
        <pre>{error.message}</pre>
    </div>
);

const SplashScreen: React.FC = () => (
    <div className="splash-screen-container">
        <img src={CHURCH.logo} alt="Church Logo" className="splash-logo" />
        <div className="splash-spinner"></div>
    </div>
);

const Loading: React.FC<{ message?: string }> = ({ message = 'Loading...' }) => (
    <div className="loading-container">
        <div className="spinner"></div>
        <span>{message}</span>
    </div>
);

const Fab: React.FC<{ onClick: () => void; icon: string, 'aria-label': string }> = ({ onClick, icon, 'aria-label': ariaLabel }) => (
    <button className="fab" onClick={onClick} aria-label={ariaLabel}>
        <span className="material-symbols-outlined">{icon}</span>
    </button>
);

const Modal: React.FC<{ 
    isOpen: boolean; 
    onClose: () => void; 
    children: React.ReactNode;
    position?: 'center' | 'bottom';
}> = ({ isOpen, onClose, children, position = 'center' }) => {
    if (!isOpen) return null;

    // Fix: Use `createPortal` directly as it's imported from 'react-dom', not from the `react-dom/client` module.
    return createPortal(
        <div className={`modal-backdrop ${position === 'bottom' ? 'modal-is-bottom' : ''}`} onClick={onClose}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                {children}
            </div>
        </div>,
        document.body
    );
};


const ImageUpload: React.FC<{
    selectedFile: File | null;
    setSelectedFile: (file: File | null) => void;
    currentImageUrl?: string | null;
    label?: string;
}> = ({ selectedFile, setSelectedFile, currentImageUrl, label = 'Add a photo' }) => {
    const [preview, setPreview] = useState<string | null>(currentImageUrl || null);
    const fileInputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (selectedFile) {
            const objectUrl = URL.createObjectURL(selectedFile);
            setPreview(objectUrl);
            return () => URL.revokeObjectURL(objectUrl);
        } else if (currentImageUrl) {
            setPreview(currentImageUrl);
        } else {
            setPreview(null);
        }
    }, [selectedFile, currentImageUrl]);

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            setSelectedFile(e.target.files[0]);
        }
    };

    const handleRemoveImage = () => {
        setSelectedFile(null);
        setPreview(null);
        if (fileInputRef.current) {
            fileInputRef.current.value = "";
        }
    };
    
    return (
        <div className="image-upload-container">
            {preview ? (
                <div className="image-preview">
                    <img src={preview} alt="Preview" />
                    <button type="button" onClick={handleRemoveImage} aria-label="Remove image">
                         <span className="material-symbols-outlined">close</span>
                    </button>
                </div>
            ) : (
                <label htmlFor="image-upload" className="image-upload-label">
                     <span className="material-symbols-outlined">add_photo_alternate</span>
                    <span>{label}</span>
                    <input
                        id="image-upload"
                        type="file"
                        accept="image/*"
                        onChange={handleFileChange}
                        ref={fileInputRef}
                        style={{ display: 'none' }}
                    />
                </label>
            )}
        </div>
    );
};


const LoginPage: React.FC = () => {
    const { auth } = useFirebase();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [name, setName] = useState(''); // For registration
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const [isRegistering, setIsRegistering] = useState(false);

    if (!auth) {
        return <Loading message="Initializing authentication..." />;
    }

    const validateForm = () => {
        if (isRegistering && !name.trim()) {
            setError('Please enter your full name.');
            return false;
        }
        if (!email.includes('@')) {
            setError('Please enter a valid email address.');
            return false;
        }
        if (password.length < 6) {
            setError('Password must be at least 6 characters long.');
            return false;
        }
        setError('');
        return true;
    };

    const handleAuthAction = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!validateForm()) return;

        setLoading(true);
        setError('');
        try {
            if (isRegistering) {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                await updateProfile(userCredential.user, { displayName: name });
                 // Firestore user document is created via a Cloud Function trigger (recommended)
                 // or you'd do it here if not using a trigger.
            } else {
                await signInWithEmailAndPassword(auth, email, password);
            }
        } catch (err: any) {
            const errorCode = err.code || 'unknown';
            switch (errorCode) {
                case 'auth/user-not-found':
                case 'auth/wrong-password':
                    setError('Invalid email or password.');
                    break;
                case 'auth/email-already-in-use':
                    setError('This email address is already in use.');
                    break;
                case 'auth/invalid-email':
                    setError('Please enter a valid email address.');
                    break;
                default:
                    setError('An unknown error occurred. Please try again.');
                    console.error("Auth error:", err);
                    break;
            }
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <div className="login-container">
            <div className="login-box">
                <img src={CHURCH.logo} alt="Church Logo" className="login-logo" />
                <h2>{isRegistering ? 'Create Account' : 'Welcome Back'}</h2>
                <p>{CHURCH.name}</p>
                <form onSubmit={handleAuthAction}>
                    {isRegistering && (
                        <input 
                            type="text"
                            className="login-input"
                            placeholder="Full Name"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            required
                        />
                    )}
                    <input 
                        type="email"
                        className="login-input"
                        placeholder="Email Address"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                    />
                    <input
                        type="password"
                        className="login-input"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                    <button type="submit" className="login-button" disabled={loading}>
                        {loading ? <div className="spinner"></div> : (isRegistering ? 'Sign Up' : 'Log In')}
                    </button>
                    {error && <p className="login-error">{error}</p>}
                </form>
                <button 
                    onClick={() => {
                        setIsRegistering(!isRegistering);
                        setError('');
                    }}
                    className="auth-toggle-link"
                >
                    {isRegistering ? 'Already have an account? Log In' : "Don't have an account? Sign Up"}
                </button>
            </div>
        </div>
    );
};

// --- Main App Pages ---
const WorshipPage: React.FC<{currentUser: User}> = ({currentUser}) => {
    const { db } = useFirebase();
    const [liveService, setLiveService] = useState<WorshipService | null>(null);
    const [pastServices, setPastServices] = useState<PastWorshipService[]>([]);
    const [loading, setLoading] = useState(true);
    const [isOfferingModalOpen, setIsOfferingModalOpen] = useState(false);
    const [isAddPastWorshipModalOpen, setIsAddPastWorshipModalOpen] = useState(false);
    const [newPastService, setNewPastService] = useState({ title: '', youtubeUrl: '' });

    useEffect(() => {
        if (!db) return;
        setLoading(true);

        const qLive = query(collection(db, "worshipServices"), where("isLive", "==", true), limit(1));
        const unsubscribeLive = onSnapshot(qLive, (snapshot) => {
            if (!snapshot.empty) {
                const serviceDoc = snapshot.docs[0];
                setLiveService({ id: serviceDoc.id, ...serviceDoc.data() } as WorshipService);
            } else {
                setLiveService(null);
            }
        });
        
        const qPast = query(collection(db, "pastWorshipServices"), orderBy("createdAt", "desc"));
        const unsubscribePast = onSnapshot(qPast, (snapshot) => {
            const services = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as PastWorshipService));
            setPastServices(services);
            setLoading(false);
        });

        return () => {
            unsubscribeLive();
            unsubscribePast();
        };
    }, [db]);
    
    const handleAddPastService = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!db || !newPastService.title || !newPastService.youtubeUrl) return;
        
        try {
            await addDoc(collection(db, "pastWorshipServices"), {
                ...newPastService,
                createdAt: serverTimestamp()
            });
            setNewPastService({ title: '', youtubeUrl: '' });
            setIsAddPastWorshipModalOpen(false);
        } catch (error) {
            console.error("Error adding past worship service: ", error);
        }
    };

    const handleDeletePastService = async (serviceId: string) => {
        if (!db || !window.confirm("Are you sure you want to delete this past service?")) return;
        try {
            await deleteDoc(doc(db, "pastWorshipServices", serviceId));
        } catch (error) {
            console.error("Error deleting past service:", error);
        }
    }

    const getYoutubeThumbnail = (url: string) => {
        try {
            const videoId = new URL(url).searchParams.get('v');
            return videoId ? `https://img.youtube.com/vi/${videoId}/hqdefault.jpg` : '/placeholder.jpg';
        } catch {
            return '/placeholder.jpg';
        }
    };


    if (loading) {
        return <Loading message="Loading worship services..." />;
    }

    return (
        <div className="page-content">
            <h2>आरधना</h2>
            {liveService ? (
                <div className="card live-worship-card">
                    <div className="live-badge">LIVE</div>
                    <div className="twitch-container">
                        <iframe
                            src={`https://player.twitch.tv/?channel=${liveService.twitchChannel}&parent=${window.location.hostname}`}
                            allowFullScreen={true}
                            title="Live Worship Stream"
                        ></iframe>
                    </div>
                    <h4>{liveService.title}</h4>
                </div>
            ) : (
                <div className="card no-live-service">
                    <span className="material-symbols-outlined">church</span>
                    <p>There is no live service at the moment.</p>
                </div>
            )}
             <div className="worship-actions">
                <button className="action-button" onClick={() => setIsOfferingModalOpen(true)}>
                    <span className="material-symbols-outlined">volunteer_activism</span>
                    Online Offering
                </button>
            </div>
            <div className="past-worship-section">
                <h3>Past Services</h3>
                {currentUser.roles.includes('admin') && (
                    <button className="action-button add-past-worship-button" onClick={() => setIsAddPastWorshipModalOpen(true)}>
                        <span className="material-symbols-outlined">add</span> Add Past Service
                    </button>
                )}
                <div className="past-worship-list">
                    {pastServices.map(service => (
                        <div key={service.id} className="card past-service-card">
                             <a href={service.youtubeUrl} target="_blank" rel="noopener noreferrer">
                                <img 
                                    src={getYoutubeThumbnail(service.youtubeUrl)}
                                    alt={service.title}
                                    className="past-service-thumbnail"
                                    loading="lazy"
                                />
                                <p className="past-service-title">{service.title}</p>
                            </a>
                            {currentUser.roles.includes('admin') && (
                                <button
                                    className="delete-button past-service-delete-button"
                                    onClick={() => handleDeletePastService(service.id)}
                                    aria-label="Delete past service"
                                >
                                    <span className="material-symbols-outlined">delete</span>
                                </button>
                             )}
                        </div>
                    ))}
                </div>
            </div>

            <Modal isOpen={isOfferingModalOpen} onClose={() => setIsOfferingModalOpen(false)}>
                <div className="offering-modal-content">
                    <h3>Online Offering</h3>
                    <img src={CHURCH.offeringDetails.qrCodeUrl} alt="QR Code for offering" className="qr-code-img" />
                    <div className="offering-details">
                        <p><strong>Bank:</strong> {CHURCH.offeringDetails.bankName}</p>
                        <p><strong>Account Holder:</strong> {CHURCH.offeringDetails.accountHolder}</p>
                        <div className="account-number-container">
                            <p><strong>Account Number:</strong> {CHURCH.offeringDetails.accountNumber}</p>
                            <button
                                className="copy-button"
                                onClick={() => {
                                    navigator.clipboard.writeText(CHURCH.offeringDetails.accountNumber);
                                    alert('Account number copied!');
                                }}
                            >
                                <span className="material-symbols-outlined">content_copy</span> Copy
                            </button>
                        </div>
                    </div>
                </div>
            </Modal>
             <Modal isOpen={isAddPastWorshipModalOpen} onClose={() => setIsAddPastWorshipModalOpen(false)}>
                <form className="modal-form" onSubmit={handleAddPastService}>
                    <h3>Add Past Service</h3>
                    <input
                        type="text"
                        placeholder="Service Title"
                        value={newPastService.title}
                        onChange={(e) => setNewPastService({ ...newPastService, title: e.target.value })}
                        required
                    />
                    <input
                        type="url"
                        placeholder="YouTube URL"
                        value={newPastService.youtubeUrl}
                        onChange={(e) => setNewPastService({ ...newPastService, youtubeUrl: e.target.value })}
                        required
                    />
                    <div className="form-actions">
                        <button type="submit" className="action-button">Save</button>
                        <button type="button" className="action-button secondary" onClick={() => setIsAddPastWorshipModalOpen(false)}>Cancel</button>
                    </div>
                </form>
            </Modal>
        </div>
    );
};


const BiblePage: React.FC = () => {
    const [verseOfTheDay, setVerseOfTheDay] = useState<Verse | null>(null);
    const [selectedReading, setSelectedReading] = useState<string | null>(null);
    const [readingContent, setReadingContent] = useState('');
    const [isLoadingReading, setIsLoadingReading] = useState(false);
    
    const dayOfMonth = new Date().getDate();

    useEffect(() => {
        const dayOfYear = Math.floor((new Date().getTime() - new Date(new Date().getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
        setVerseOfTheDay(MOCK_VERSES_OF_THE_DAY[dayOfYear % MOCK_VERSES_OF_THE_DAY.length]);
    }, []);

    const handleReadingClick = async (reading: string) => {
        setSelectedReading(reading);
        setIsLoadingReading(true);
        // This is a placeholder. In a real app, you'd fetch this from a Bible API.
        setTimeout(() => {
            const content = `Content for ${reading}:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. ...`;
            setReadingContent(content);
            setIsLoadingReading(false);
        }, 500);
    };

    const getDayOfYear = () => {
         const now = new Date();
         const start = new Date(now.getFullYear(), 0, 0);
         const diff = (now.getTime() - start.getTime()) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);
         const oneDay = 1000 * 60 * 60 * 24;
         return Math.floor(diff / oneDay);
    };

    const todayReading = MCCHEYNE_READING_PLAN[getDayOfYear() -1] || MCCHEYNE_READING_PLAN[0];

    return (
        <div className="page-content">
            <h2>बाइबल</h2>
            {verseOfTheDay && (
                <div className="card verse-card">
                    <p className="verse-text">"{verseOfTheDay.text}"</p>
                    <p className="verse-ref">- {verseOfTheDay.verse}</p>
                </div>
            )}
            
            <div className="card bible-card" onClick={() => handleReadingClick(todayReading)}>
                <h3>आजको बाइबल पढ्ने योजनाको लागि यहाँ गर्नुहोस्।</h3>
                <p>{todayReading}</p>
            </div>
            
            <div className="card bible-card">
                <h3>आजको हितोपदेश</h3>
                <p>आज {dayOfMonth} तारिख हो, हितोपदेश {dayOfMonth} अध्याय पढ्नुहोस्।</p>
            </div>

            <Modal isOpen={selectedReading !== null} onClose={() => setSelectedReading(null)}>
                <div className="bible-reading-modal-content">
                    <h3>{selectedReading}</h3>
                    {isLoadingReading ? (
                        <Loading message="Loading text..." />
                    ) : (
                        <div className="bible-text-content">
                            {readingContent}
                        </div>
                    )}
                     <button className="action-button close-reading-button" onClick={() => setSelectedReading(null)}>Close</button>
                </div>
            </Modal>
        </div>
    );
};

const NewsPage: React.FC<{currentUser: User}> = ({currentUser}) => {
    const { db, storage } = useFirebase();
    const [news, setNews] = useState<NewsItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingNews, setEditingNews] = useState<NewsItem | null>(null);

    useEffect(() => {
        if (!db) return;
        setLoading(true);
        const q = query(collection(db, "news"), orderBy("createdAt", "desc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const newsItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as NewsItem));
            setNews(newsItems);
            setLoading(false);
        });
        return () => unsubscribe();
    }, [db]);
    
    const handleOpenModal = (newsItem: NewsItem | null = null) => {
        setEditingNews(newsItem);
        setIsModalOpen(true);
    };
    
    const handleCloseModal = () => {
        setEditingNews(null);
        setIsModalOpen(false);
    };

    const handleSaveNews = async (title: string, content: string, imageFile: File | null) => {
        if (!db || !storage || !currentUser) return;

        try {
            let imageUrl = editingNews?.image || undefined;
            if (imageFile) {
                const imageRef = ref(storage, `news/${Date.now()}_${imageFile.name}`);
                await uploadBytes(imageRef, imageFile);
                imageUrl = await getDownloadURL(imageRef);
            }

            const data = {
                title,
                content,
                image: imageUrl,
                authorId: currentUser.id,
                authorName: currentUser.name,
            };

            if (editingNews) {
                await updateDoc(doc(db, "news", editingNews.id), data);
            } else {
                await addDoc(collection(db, "news"), {
                    ...data,
                    createdAt: serverTimestamp()
                });
            }
        } catch (error) {
            console.error("Failed to save news:", error);
            alert("An error occurred. Could not save the news item.");
        } finally {
            handleCloseModal();
        }
    };
    
    const handleDeleteNews = async (newsItem: NewsItem) => {
        if(!db || !storage) return;
        if (!window.confirm(`Are you sure you want to delete "${newsItem.title}"?`)) return;

        try {
            // Delete image from storage if it exists
            if (newsItem.image) {
                const imageRef = ref(storage, newsItem.image);
                await deleteObject(imageRef).catch(error => {
                    // It's okay if the image doesn't exist, log other errors
                    if(error.code !== 'storage/object-not-found') {
                        console.error("Error deleting image from storage:", error);
                    }
                });
            }
            // Delete document from Firestore
            await deleteDoc(doc(db, "news", newsItem.id));
        } catch (error) {
            console.error("Error deleting news item: ", error);
        }
    };


    if (loading) {
        return <Loading message="Loading news..." />;
    }

    const canPostNews = currentUser.roles.includes('admin') || currentUser.roles.includes('news_contributor');

    return (
        <div className="page-content">
            <h2>सुचना</h2>
            <div className="list-container">
                {news.map(item => (
                    <div key={item.id} className="card news-item">
                        {item.image && <img src={item.image} alt={item.title} className="news-image" loading="lazy" />}
                        <div className="news-content">
                             <div className="news-header">
                                <h3>{item.title}</h3>
                                {currentUser.id === item.authorId && (
                                    <div className="item-actions-header">
                                        <button onClick={() => handleOpenModal(item)} className="edit-button" aria-label="Edit news">
                                            <span className="material-symbols-outlined">edit</span>
                                        </button>
                                        <button onClick={() => handleDeleteNews(item)} className="delete-button" aria-label="Delete news">
                                            <span className="material-symbols-outlined">delete</span>
                                        </button>
                                    </div>
                                )}
                            </div>
                            <p className="news-meta">By {item.authorName} on {formatDate(item.createdAt)}</p>
                            <p>{item.content}</p>
                        </div>
                    </div>
                ))}
            </div>
            {canPostNews && <Fab onClick={() => handleOpenModal()} icon="feed" aria-label="Add news" />}
            
            <NewsFormModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveNews}
                newsItem={editingNews}
            />
        </div>
    );
};

const NewsFormModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    onSave: (title: string, content: string, imageFile: File | null) => void;
    newsItem: NewsItem | null;
}> = ({ isOpen, onClose, onSave, newsItem }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [imageFile, setImageFile] = useState<File | null>(null);
    const [isSaving, setIsSaving] = useState(false);

    useEffect(() => {
        if (isOpen) {
            setTitle(newsItem?.title || '');
            setContent(newsItem?.content || '');
            setImageFile(null); // Reset file input on open
        }
    }, [isOpen, newsItem]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsSaving(true);
        await onSave(title, content, imageFile);
        setIsSaving(false);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <form className="modal-form" onSubmit={handleSubmit}>
                <button type="button" className="modal-close-button" onClick={onClose} aria-label="Close">
                     <span className="material-symbols-outlined">close</span>
                </button>
                <h3>{newsItem ? 'सुचना सम्पादन गर्नुहोस्' : 'सुचना थप्नुहोस्।'}</h3>
                <input
                    type="text"
                    placeholder="शीर्षक"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                />
                <textarea
                    placeholder="सामग्री"
                    rows={5}
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    required
                ></textarea>
                <ImageUpload 
                    selectedFile={imageFile} 
                    setSelectedFile={setImageFile} 
                    currentImageUrl={newsItem?.image}
                    label="फोटो थप्नुहोस्।(यदि तपाईं चाहनुहुन्छ भने)"
                />

                <div className="form-actions">
                    <button type="submit" className="action-button" disabled={isSaving}>
                        {isSaving ? <div className="spinner"></div> : 'सेभ गर्नुहोस्'}
                    </button>
                </div>
            </form>
        </Modal>
    );
};

const PodcastsPage: React.FC<{currentUser: User}> = ({currentUser}) => {
    const { db, storage } = useFirebase();
    const [podcasts, setPodcasts] = useState<Podcast[]>([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);

    useEffect(() => {
        if (!db) return;
        setLoading(true);
        const q = query(collection(db, "podcasts"), orderBy("createdAt", "desc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const podcastItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Podcast));
            setPodcasts(podcastItems);
            setLoading(false);
        });
        return () => unsubscribe();
    }, [db]);

    const handleSavePodcast = async (title: string, audioFile: File) => {
        if (!db || !storage || !currentUser) return;
        
        const audioRef = ref(storage, `podcasts/${Date.now()}_${audioFile.name}`);
        await uploadBytes(audioRef, audioFile);
        const audioUrl = await getDownloadURL(audioRef);

        await addDoc(collection(db, "podcasts"), {
            title,
            audioUrl,
            authorId: currentUser.id,
            authorName: currentUser.name,
            createdAt: serverTimestamp(),
        });
        
        setIsModalOpen(false);
    };
    
    const handleDeletePodcast = async (podcast: Podcast) => {
        if(!db || !storage) return;
        if (!window.confirm(`Are you sure you want to delete "${podcast.title}"?`)) return;

        try {
            const audioRef = ref(storage, podcast.audioUrl);
            await deleteObject(audioRef);
            await deleteDoc(doc(db, "podcasts", podcast.id));
        } catch (error) {
            console.error("Error deleting podcast: ", error);
        }
    };


    if (loading) {
        return <Loading message="Loading podcasts..." />;
    }

    const canPostPodcast = currentUser.roles.includes('admin') || currentUser.roles.includes('podcast_contributor');

    return (
        <div className="page-content">
            <h2>Podcasts</h2>
            <div className="list-container">
                {podcasts.map(podcast => (
                    <div key={podcast.id} className="card podcast-item">
                        <div className="podcast-info">
                            <div>
                                <p className="podcast-title">{podcast.title}</p>
                                <p className="podcast-author">By {podcast.authorName} - {formatDate(podcast.createdAt)}</p>
                            </div>
                            {currentUser.id === podcast.authorId && (
                                <button onClick={() => handleDeletePodcast(podcast)} className="delete-button" aria-label="Delete podcast">
                                    <span className="material-symbols-outlined">delete</span>
                                </button>
                            )}
                        </div>
                        <audio controls className="podcast-player" src={podcast.audioUrl}>
                            Your browser does not support the audio element.
                        </audio>
                    </div>
                ))}
            </div>
            {canPostPodcast && <Fab onClick={() => setIsModalOpen(true)} icon="podcasts" aria-label="Add podcast" />}

            <AddPodcastModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onSave={handleSavePodcast}
            />
        </div>
    );
};

const AddPodcastModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    onSave: (title: string, audioFile: File) => void;
}> = ({ isOpen, onClose, onSave }) => {
    const [title, setTitle] = useState('');
    const [audioFile, setAudioFile] = useState<File | null>(null);
    const [isSaving, setIsSaving] = useState(false);
    const [activeTab, setActiveTab] = useState<'upload' | 'record'>('upload');
    
    // Recording state
    const [isRecording, setIsRecording] = useState(false);
    const [recordingTime, setRecordingTime] = useState(0);
    const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);
    const mediaRecorderRef = useRef<MediaRecorder | null>(null);
    const timerIntervalRef = useRef<number | null>(null);

    const handleStartRecording = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorderRef.current = new MediaRecorder(stream);
            const chunks: Blob[] = [];
            
            mediaRecorderRef.current.ondataavailable = (e) => {
                chunks.push(e.data);
            };
            
            mediaRecorderRef.current.onstop = () => {
                const blob = new Blob(chunks, { type: 'audio/webm' });
                setRecordedBlob(blob);
                const audioFile = new File([blob], "recording.webm", { type: 'audio/webm' });
                setAudioFile(audioFile);
                stream.getTracks().forEach(track => track.stop());
            };
            
            mediaRecorderRef.current.start();
            setIsRecording(true);
            timerIntervalRef.current = window.setInterval(() => {
                setRecordingTime(prev => prev + 1);
            }, 1000);
        } catch (error) {
            console.error("Error starting recording:", error);
            alert("Could not start recording. Please ensure microphone permissions are granted.");
        }
    };
    
    const handleStopRecording = () => {
        if (mediaRecorderRef.current) {
            mediaRecorderRef.current.stop();
            setIsRecording(false);
            if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);
            setRecordingTime(0);
        }
    };

    const handleResetRecording = () => {
        setRecordedBlob(null);
        setAudioFile(null);
        setRecordingTime(0);
    }
    
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!audioFile || !title) {
            alert("Please provide a title and select an audio file.");
            return;
        }
        setIsSaving(true);
        await onSave(title, audioFile);
        setIsSaving(false);
        // Reset state
        setTitle('');
        setAudioFile(null);
        handleResetRecording();
    };

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
        const secs = (seconds % 60).toString().padStart(2, '0');
        return `${mins}:${secs}`;
    };

    return (
         <Modal isOpen={isOpen} onClose={onClose}>
            <form className="modal-form" onSubmit={handleSubmit}>
                <button type="button" className="modal-close-button" onClick={onClose} aria-label="Close">
                     <span className="material-symbols-outlined">close</span>
                </button>
                <h3>Add Podcast</h3>

                <div className="add-podcast-tabs">
                    <button type="button" className={activeTab === 'upload' ? 'active' : ''} onClick={() => setActiveTab('upload')}>Upload</button>
                    <button type="button" className={activeTab === 'record' ? 'active' : ''} onClick={() => setActiveTab('record')}>Record</button>
                </div>

                <input
                    type="text"
                    placeholder="Podcast Title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                />
                
                {activeTab === 'upload' && (
                     <label htmlFor="audio-upload" className="action-button secondary custom-file-input">
                        <span className="material-symbols-outlined">upload_file</span>
                        <span>{audioFile ? audioFile.name : 'Choose Audio File'}</span>
                         <input
                            id="audio-upload"
                            type="file"
                            accept="audio/*"
                            onChange={(e) => e.target.files && setAudioFile(e.target.files[0])}
                            style={{ display: 'none' }}
                        />
                    </label>
                )}

                {activeTab === 'record' && (
                    <div className="record-section">
                        {!recordedBlob ? (
                             <button type="button" className={`record-button ${isRecording ? 'recording' : ''}`} onClick={isRecording ? handleStopRecording : handleStartRecording}>
                                <span className="material-symbols-outlined">{isRecording ? 'stop_circle' : 'mic'}</span>
                                {isRecording ? <span className="timer">{formatTime(recordingTime)}</span> : 'Start Recording'}
                            </button>
                        ) : (
                             <div className="recording-preview">
                                <p>Recording complete:</p>
                                <audio controls src={URL.createObjectURL(recordedBlob)}></audio>
                                <button type="button" className="action-button secondary" onClick={handleResetRecording}>Record Again</button>
                            </div>
                        )}
                    </div>
                )}
                
                <div className="form-actions">
                    <button type="submit" className="action-button" disabled={isSaving || !audioFile}>
                        {isSaving ? <div className="spinner"></div> : 'Save Podcast'}
                    </button>
                </div>
            </form>
        </Modal>
    );
};


const PrayerPage: React.FC<{ currentUser: User }> = ({ currentUser }) => {
    const { db, storage } = useFirebase();
    const [requests, setRequests] = useState<PrayerRequest[]>([]);
    const [loading, setLoading] = useState(true);
    const [selectedRequest, setSelectedRequest] = useState<PrayerRequest | null>(null);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [editingRequest, setEditingRequest] = useState<PrayerRequest | null>(null);

    useEffect(() => {
        if (!db) return;
        setLoading(true);
        const q = query(collection(db, "prayerRequests"), orderBy("createdAt", "desc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const prayerData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as PrayerRequest));
            setRequests(prayerData);
            setLoading(false);
        });
        return () => unsubscribe();
    }, [db]);
    
    const handleTogglePrayed = async (request: PrayerRequest) => {
        if(!db) return;
        const requestRef = doc(db, "prayerRequests", request.id);
        const alreadyPrayed = request.prayedBy.includes(currentUser.id);

        await updateDoc(requestRef, {
            prayedBy: alreadyPrayed ? arrayRemove(currentUser.id) : arrayUnion(currentUser.id)
        });
    };

    const handleOpenAddModal = (request: PrayerRequest | null = null) => {
        setEditingRequest(request);
        setIsAddModalOpen(true);
    };

    const handleCloseAddModal = () => {
        setIsAddModalOpen(false);
        setEditingRequest(null);
    };
    
    const handleSavePrayerRequest = async (title: string, content: string, imageFile: File | null) => {
        if (!db || !storage) return;

        try {
            let imageUrl: string | null = editingRequest?.image || null;

            if (imageFile) {
                const imageRef = ref(storage, `prayers/${Date.now()}_${imageFile.name}`);
                await uploadBytes(imageRef, imageFile);
                imageUrl = await getDownloadURL(imageRef);
            }

            const data = {
                title,
                content,
                image: imageUrl,
                authorId: editingRequest?.authorId || currentUser.id,
                authorName: editingRequest?.authorName || currentUser.name,
            };

            if (editingRequest) {
                await updateDoc(doc(db, "prayerRequests", editingRequest.id), data);
            } else {
                await addDoc(collection(db, "prayerRequests"), {
                    ...data,
                    prayedBy: [],
                    comments: [],
                    createdAt: serverTimestamp(),
                });
            }
        } catch (error) {
            console.error("Failed to save prayer request:", error);
            alert("An error occurred. Could not save the prayer request.");
        } finally {
            handleCloseAddModal();
        }
    };
    
    const handleDeleteRequest = async (request: PrayerRequest) => {
        if(!db || !storage) return;
        if (!window.confirm("Are you sure you want to delete this prayer request?")) return;

        try {
            if (request.image) {
                const imageRef = ref(storage, request.image);
                await deleteObject(imageRef).catch(e => console.error("Image delete failed", e));
            }
            await deleteDoc(doc(db, "prayerRequests", request.id));
            setSelectedRequest(null);
        } catch (error) {
            console.error("Error deleting prayer request: ", error);
        }
    };


    if (loading) {
        return <Loading message="Loading prayer requests..." />;
    }

    return (
        <div className="page-content">
            <h2>प्रार्थना</h2>
            <div className="list-container">
                {requests.map(req => (
                    <div key={req.id} className="card prayer-item" onClick={() => setSelectedRequest(req)}>
                        {req.image && <img src={req.image} alt={req.title} className="prayer-image" loading="lazy" />}
                        <h4>{req.title}</h4>
                        <p className="prayer-content">{req.content}</p>
                        <div className="prayer-meta">
                            <span>By {req.authorName} - {formatRelativeTime(req.createdAt)}</span>
                            <div className="prayer-actions" onClick={(e) => e.stopPropagation()}>
                                <button 
                                    className={`prayer-action-button ${req.prayedBy.includes(currentUser.id) ? 'prayed' : ''}`}
                                    onClick={() => handleTogglePrayed(req)}
                                >
                                    <span className="material-symbols-outlined">volunteer_activism</span>
                                    <span>{req.prayedBy.length}</span>
                                </button>
                                <div className="prayer-action-button">
                                    <span className="material-symbols-outlined">comment</span>
                                    <span>{req.comments?.length || 0}</span>
                                </div>
                            </div>
                        </div>
                         {currentUser.id === req.authorId && (
                            <div className="item-actions-footer">
                                <button onClick={(e) => { e.stopPropagation(); handleOpenAddModal(req); }} className="edit-button" aria-label="Edit prayer request">
                                    <span className="material-symbols-outlined">edit</span>
                                </button>
                                <button onClick={(e) => { e.stopPropagation(); handleDeleteRequest(req); }} className="delete-button" aria-label="Delete prayer request">
                                    <span className="material-symbols-outlined">delete</span>
                                </button>
                            </div>
                        )}
                    </div>
                ))}
            </div>
            <Fab onClick={() => handleOpenAddModal()} icon="volunteer_activism" aria-label="Add prayer request" />

            {selectedRequest && (
                <PrayerDetailsModal
                    request={selectedRequest}
                    onClose={() => setSelectedRequest(null)}
                    currentUser={currentUser}
                    onEdit={() => handleOpenAddModal(selectedRequest)}
                    onDelete={() => handleDeleteRequest(selectedRequest)}
                />
            )}
             <PrayerFormModal 
                isOpen={isAddModalOpen} 
                onClose={handleCloseAddModal}
                onSave={handleSavePrayerRequest}
                request={editingRequest}
            />
        </div>
    );
};


const PrayerFormModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    onSave: (title: string, content: string, imageFile: File | null) => void;
    request: PrayerRequest | null;
}> = ({ isOpen, onClose, onSave, request }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [imageFile, setImageFile] = useState<File | null>(null);
    const [isSaving, setIsSaving] = useState(false);

    useEffect(() => {
        if (isOpen) {
            setTitle(request?.title || '');
            setContent(request?.content || '');
            setImageFile(null); // Reset file input
        }
    }, [isOpen, request]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsSaving(true);
        await onSave(title, content, imageFile);
        setIsSaving(false);
    };
    
    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <form className="modal-form" onSubmit={handleSubmit}>
                <button type="button" className="modal-close-button" onClick={onClose} aria-label="Close">
                     <span className="material-symbols-outlined">close</span>
                </button>
                <h3>{request ? 'अनुरोध सम्पादन गर्नुहोस्' : 'प्रार्थना अनुरोध'}</h3>
                <input
                    type="text"
                    placeholder="शीर्षक"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                />
                <textarea
                    placeholder="हामीले तपाईंको लागि के प्रार्थना गर्नुपर्छ?"
                    rows={5}
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    required
                ></textarea>
                <ImageUpload 
                    selectedFile={imageFile} 
                    setSelectedFile={setImageFile} 
                    currentImageUrl={request?.image} 
                    label="फोटो थप्नुहोस्।(यदि तपाईं चाहनुहुन्छ भने)" 
                />
                <button type="submit" className="action-button" disabled={isSaving}>
                    {isSaving ? <div className="spinner"></div> : 'अनुरोध पठाउनुहोस्।'}
                </button>
            </form>
        </Modal>
    );
};

const PrayerDetailsModal: React.FC<{
    request: PrayerRequest;
    onClose: () => void;
    currentUser: User;
    onEdit: () => void;
    onDelete: () => void;
}> = ({ request, onClose, currentUser, onEdit, onDelete }) => {
    const { db } = useFirebase();
    const [newComment, setNewComment] = useState('');
    const [comments, setComments] = useState<Comment[]>([]);

    useEffect(() => {
        if (!db) return;
        const commentsCol = collection(db, "prayerRequests", request.id, "comments");
        const q = query(commentsCol, orderBy("createdAt", "asc"));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedComments = snapshot.docs.map(doc => ({id: doc.id, ...doc.data() } as Comment));
            setComments(fetchedComments);
        });
        return () => unsubscribe();
    }, [db, request.id]);


    const handleAddComment = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!db || !newComment.trim()) return;

        const commentData = {
            authorId: currentUser.id,
            authorName: currentUser.name,
            authorAvatar: currentUser.avatar,
            content: newComment,
            createdAt: serverTimestamp(),
        };

        try {
            await addDoc(collection(db, "prayerRequests", request.id, "comments"), commentData);
            setNewComment('');
        } catch (error) {
            console.error("Error adding comment: ", error);
        }
    };

    return (
        <Modal isOpen={true} onClose={onClose} position="bottom">
            <div>
                 <button type="button" className="modal-close-button" onClick={onClose} aria-label="Close">
                     <span className="material-symbols-outlined">close</span>
                </button>
                <div className="prayer-details-header">
                    <h3>{request.title}</h3>
                     {currentUser.id === request.authorId && (
                        <div className="item-actions-header">
                            <button onClick={onEdit} className="edit-button" aria-label="Edit prayer request">
                                <span className="material-symbols-outlined">edit</span>
                            </button>
                            <button onClick={onDelete} className="delete-button" aria-label="Delete prayer request">
                                <span className="material-symbols-outlined">delete</span>
                            </button>
                        </div>
                    )}
                </div>
                <p className="prayer-author">By {request.authorName} - {formatDate(request.createdAt)}</p>
                {request.image && <img src={request.image} alt={request.title} style={{ width: '100%', borderRadius: '8px', marginBottom: '16px' }} />}
                <p className="prayer-main-content">{request.content}</p>

                <div className="prayer-comments-section">
                    <h4>Comments ({comments.length})</h4>
                    <div className="prayer-comment-list">
                        {comments.length > 0 ? (
                            comments.map((comment: any) => ( // TODO: Fix type
                                <div key={comment.id} className="comment-item">
                                    <strong>{comment.authorName}</strong>
                                    <p>{comment.content}</p>
                                    <span className="comment-timestamp">{formatRelativeTime(comment.createdAt)}</span>
                                </div>
                            ))
                        ) : (
                            <p className="no-comments">No comments yet.</p>
                        )}
                    </div>
                    <form className="comment-form" onSubmit={handleAddComment}>
                        <input
                            type="text"
                            placeholder="Add a comment..."
                            value={newComment}
                            onChange={(e) => setNewComment(e.target.value)}
                        />
                        <button type="submit" aria-label="Send comment">
                             <span className="material-symbols-outlined">send</span>
                        </button>
                    </form>
                </div>
            </div>
        </Modal>
    );
};


const ChatListPage: React.FC<{ currentUser: User, onSelectChat: (chatId: string) => void }> = ({ currentUser, onSelectChat }) => {
    const { db } = useFirebase();
    const [chats, setChats] = useState<Chat[]>([]);
    const [users, setUsers] = useState<User[]>([]);
    const [loading, setLoading] = useState(true);
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);
    const [isCreatingChat, setIsCreatingChat] = useState(false);

    useEffect(() => {
        if (!db) return;
        // Fetch all users for chat creation
        const usersQuery = query(collection(db, "users"));
        const unsubscribeUsers = onSnapshot(usersQuery, snapshot => {
            const allUsers = snapshot.docs
                .map(doc => ({ id: doc.id, ...doc.data() } as User))
                .filter(user => user.id !== currentUser.id);
            setUsers(allUsers);
        });

        // Fetch user's chats
        const chatsQuery = query(collection(db, "chats"), where("participantIds", "array-contains", currentUser.id), orderBy("lastActivity", "desc"));
        const unsubscribeChats = onSnapshot(chatsQuery, snapshot => {
            const userChats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Chat));
            setChats(userChats);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching chats: ", error);
            setLoading(false);
        });
        
        return () => {
            unsubscribeUsers();
            unsubscribeChats();
        };
    }, [db, currentUser.id]);
    
    const handleStartChat = async () => {
        if (!db || selectedUserIds.length === 0) return;
        setIsCreatingChat(true);

        try {
            const participantIds = [currentUser.id, ...selectedUserIds].sort();
            
            // Check if chat already exists
            const q = query(collection(db, "chats"), where("participantIds", "==", participantIds));
            const existingChatsSnapshot = await getDocs(q);
            
            if (!existingChatsSnapshot.empty) {
                // Chat exists, navigate to it
                const existingChat = existingChatsSnapshot.docs[0];
                onSelectChat(existingChat.id);
            } else {
                // Create new chat
                const participants: { [key: string]: { name: string; avatar: string; } } = {
                    [currentUser.id]: { name: currentUser.name, avatar: currentUser.avatar }
                };
                selectedUserIds.forEach(uid => {
                    const user = users.find(u => u.id === uid);
                    if (user) {
                        participants[uid] = { name: user.name, avatar: user.avatar };
                    }
                });
                
                const newChatRef = await addDoc(collection(db, "chats"), {
                    participantIds,
                    participants,
                    lastMessage: null,
                    createdAt: serverTimestamp(),
                    lastActivity: serverTimestamp(),
                });
                onSelectChat(newChatRef.id);
            }
        } catch (error) {
            console.error("Error starting chat:", error);
            alert("च्याट सुरु गर्न असफल भयो।");
        } finally {
            setIsCreateModalOpen(false);
            setSelectedUserIds([]);
            setIsCreatingChat(false);
        }
    };
    
    const getChatPartner = (chat: Chat) => {
        const partnerId = chat.participantIds.find(id => id !== currentUser.id);
        return partnerId ? chat.participants[partnerId] : { name: 'Unknown', avatar: '' };
    };

    if (loading) return <Loading message="Loading chats..." />;

    return (
        <div className="page-content">
            <h2>संगतिहरु</h2>
            <div className="list-container">
                {chats.map(chat => {
                    const partner = getChatPartner(chat);
                    const lastReadTime = chat.lastRead?.[currentUser.id]?.toDate() || new Date(0);
                    const lastMessageTime = chat.lastMessage?.createdAt?.toDate() || new Date(0);
                    const isUnread = lastMessageTime > lastReadTime && chat.lastMessage?.senderId !== currentUser.id;

                    return (
                        <div key={chat.id} className={`list-item chat-item ${isUnread ? 'unread' : ''}`} onClick={() => onSelectChat(chat.id)}>
                            <div className="chat-avatar">{getAvatarInitial(partner.name)}</div>
                            <div className="chat-info">
                                <span className="chat-name">{partner.name}</span>
                                {chat.lastMessage && (
                                    <p className="chat-last-message">
                                        {chat.lastMessage.type === 'image' && <span className="material-symbols-outlined">image</span>}
                                        {chat.lastMessage.type === 'video' && <span className="material-symbols-outlined">videocam</span>}
                                        {chat.lastMessage.content}
                                    </p>
                                )}
                            </div>
                            <div className="chat-meta">
                                {chat.lastMessage && <span>{formatRelativeTime(chat.lastMessage.createdAt)}</span>}
                                {isUnread && <div className="unread-dot"></div>}
                            </div>
                        </div>
                    );
                })}
            </div>
            <Fab onClick={() => setIsCreateModalOpen(true)} icon="groups" aria-label="Start new chat" />
            
            <Modal isOpen={isCreateModalOpen} onClose={() => setIsCreateModalOpen(false)}>
                <div className="create-chat-modal">
                    <h3>Start a new chat</h3>
                    <div className="user-list">
                        {users.map(user => {
                            const isSelected = selectedUserIds.includes(user.id);
                            return (
                                <div
                                    key={user.id}
                                    className={`list-item user-list-item selectable ${isSelected ? 'selected' : ''}`}
                                    onClick={() => {
                                        setSelectedUserIds(prev =>
                                            isSelected ? prev.filter(id => id !== user.id) : [user.id] // For now, only 1-on-1
                                            // isSelected ? prev.filter(id => id !== user.id) : [...prev, user.id] // For group chat
                                        );
                                    }}
                                >
                                    <div className="chat-avatar">{getAvatarInitial(user.name)}</div>
                                    <p>{user.name}</p>
                                    <div className="checkbox">
                                        {isSelected && <span className="material-symbols-outlined">check</span>}
                                    </div>
                                </div>
                            )
                        })}
                    </div>
                     <button className="action-button" onClick={handleStartChat} disabled={selectedUserIds.length === 0 || isCreatingChat}>
                        {isCreatingChat ? <Loading message="Starting..." /> : 'Start Chat'}
                    </button>
                </div>
            </Modal>
        </div>
    );
};

const ConversationPage: React.FC<{
    chatId: string;
    currentUser: User;
    onBack: () => void;
}> = ({ chatId, currentUser, onBack }) => {
    const { db, storage } = useFirebase();
    const [chat, setChat] = useState<Chat | null>(null);
    const [messages, setMessages] = useState<Message[]>([]);
    const [newMessage, setNewMessage] = useState('');
    const messagesEndRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (!db) return;
        const chatRef = doc(db, "chats", chatId);
        const unsubscribeChat = onSnapshot(chatRef, (doc) => {
            if (doc.exists()) {
                const chatData = { id: doc.id, ...doc.data() } as Chat;
                setChat(chatData);

                // Mark as read
                updateDoc(chatRef, {
                    [`lastRead.${currentUser.id}`]: serverTimestamp()
                });
            }
        });
        
        const messagesQuery = query(collection(db, "chats", chatId, "messages"), orderBy("createdAt", "asc"));
        const unsubscribeMessages = onSnapshot(messagesQuery, (snapshot) => {
            const msgs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Message));
            setMessages(msgs);
        });

        return () => {
            unsubscribeChat();
            unsubscribeMessages();
        };
    }, [db, chatId, currentUser.id]);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const handleSendMessage = async () => {
        if (!db || !newMessage.trim() || !chat) return;

        const content = newMessage;
        setNewMessage('');

        await addDoc(collection(db, "chats", chatId, "messages"), {
            senderId: currentUser.id,
            content: content,
            type: 'text',
            createdAt: serverTimestamp(),
        });
        
        await updateDoc(doc(db, "chats", chatId), {
            lastMessage: {
                content: content,
                senderId: currentUser.id,
                createdAt: serverTimestamp(),
                type: 'text'
            },
            lastActivity: serverTimestamp()
        });
    };

    const partnerName = chat ? Object.values(chat.participants).find(p => p.name !== currentUser.name)?.name || 'Chat' : 'Chat';

    return (
        <div className="conversation-page">
            <header className="conversation-header">
                <button onClick={onBack} className="back-button" aria-label="Back to chats">
                    <span className="material-symbols-outlined">arrow_back</span>
                </button>
                <h3>{partnerName}</h3>
                <div style={{width: '40px'}}></div>
            </header>
            <div className="message-list">
                {messages.map(msg => (
                    <div
                        key={msg.id || msg.tempId}
                        className={`message-container ${msg.senderId === currentUser.id ? 'sent' : 'received'}`}
                    >
                        <div className="message-bubble">
                            {msg.content}
                             <div className="message-footer">
                                <span className="message-timestamp">{formatTime(msg.createdAt)}</span>
                            </div>
                        </div>
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>
            <div className="message-input-container">
                 <input
                    type="text"
                    placeholder="Type a message..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                />
                <button
                    className="send-button"
                    onClick={handleSendMessage}
                    disabled={!newMessage.trim()}
                    aria-label="Send message"
                >
                    <span className="material-symbols-outlined">send</span>
                </button>
            </div>
        </div>
    );
};


// --- App Structure & Routing ---
type Page = 'worship' | 'bible' | 'news' | 'podcasts' | 'prayer' | 'chat';

const App: React.FC = () => {
    const firebase = useFirebase();
    const [authReady, setAuthReady] = useState(false);
    const [user, setUser] = useState<import('firebase/auth').User | null>(null);
    const [currentUser, setCurrentUser] = useState<User | null>(null);
    const [activePage, setActivePage] = useState<Page>('news');
    const [activeChatId, setActiveChatId] = useState<string | null>(null);
    const [isNotificationPanelOpen, setIsNotificationPanelOpen] = useState(false);
    
    useEffect(() => {
        if (!firebase.auth || !firebase.db) {
            // Wait for Firebase to be ready
            return;
        }

        const unsubscribeAuth = onAuthStateChanged(firebase.auth, async (user) => {
            setUser(user);
            if (user) {
                // Fetch user profile from Firestore
                const userDocRef = doc(firebase.db as any, 'users', user.uid);
                const userDoc = await getDoc(userDocRef);
                if (userDoc.exists()) {
                    setCurrentUser({ id: user.uid, ...userDoc.data() } as User);
                } else {
                    // Create user profile if it doesn't exist (first login after registration)
                    const newUser: User = {
                        id: user.uid,
                        name: user.displayName || 'New User',
                        email: user.email || '',
                        avatar: user.photoURL || '',
                        roles: ['member'],
                        fcmTokens: []
                    };
                    await setDoc(userDocRef, newUser);
                    setCurrentUser(newUser);
                }
                
                // --- Push Notifications Setup ---
                setupNotifications(user.uid);

            } else {
                setCurrentUser(null);
            }
            setAuthReady(true);
        });

        return () => unsubscribeAuth();
    }, [firebase.auth, firebase.db]);

     const setupNotifications = async (userId: string) => {
        if (!firebase.messaging || !firebase.db) return;

        try {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {
                const currentToken = await getToken(firebase.messaging, { vapidKey: import.meta.env.VITE_FIREBASE_VAPID_KEY });
                if (currentToken) {
                    console.log('FCM Token:', currentToken);
                    // Save the token to the user's document in Firestore
                    const userDocRef = doc(firebase.db, 'users', userId);
                    const userDoc = await getDoc(userDocRef);
                    if(userDoc.exists()){
                        const tokens = userDoc.data().fcmTokens || [];
                        if(!tokens.includes(currentToken)){
                             await updateDoc(userDocRef, {
                                fcmTokens: arrayUnion(currentToken)
                            });
                        }
                    }
                   
                } else {
                    console.log('No registration token available. Request permission to generate one.');
                }
            }
        } catch (error) {
            console.error('An error occurred while retrieving token. ', error);
        }

        onMessage(firebase.messaging, (payload) => {
            console.log('Message received. ', payload);
            // Handle foreground message here
            // e.g., show a toast notification
        });
    };

    const handleLogout = () => {
        if (!firebase.auth) return;
        signOut(firebase.auth);
    };

    if (firebase.firebaseError) {
        return <ErrorFallback error={new Error(firebase.firebaseError)} />;
    }
    if (!authReady) {
        return <SplashScreen />;
    }

    if (!user || !currentUser) {
        return <LoginPage />;
    }
    
    if (activeChatId) {
        return <ConversationPage chatId={activeChatId} currentUser={currentUser} onBack={() => setActiveChatId(null)} />;
    }

    const renderPage = () => {
        switch (activePage) {
            case 'worship': return <WorshipPage currentUser={currentUser} />;
            case 'bible': return <BiblePage />;
            case 'news': return <NewsPage currentUser={currentUser} />;
            case 'podcasts': return <PodcastsPage currentUser={currentUser} />;
            case 'prayer': return <PrayerPage currentUser={currentUser} />;
            case 'chat': return <ChatListPage currentUser={currentUser} onSelectChat={setActiveChatId} />;
            default: return <NewsPage currentUser={currentUser} />;
        }
    };
    
    return (
        <div className="app-container">
            <header className="app-header">
                <div className="header-content">
                    <img src={CHURCH.logo} alt="Church Logo" className="header-logo" />
                    <h1>{CHURCH.name}</h1>
                </div>
                 <div className="header-actions">
                    <button className="header-button" onClick={() => setIsNotificationPanelOpen(true)}>
                        <span className="material-symbols-outlined">notifications</span>
                        {/* <div className="notification-dot"></div> */}
                    </button>
                    <button className="header-button" onClick={handleLogout}>
                        <span className="material-symbols-outlined">logout</span>
                    </button>
                </div>
            </header>
            <main className="main-content">
                {renderPage()}
            </main>
            <nav className="bottom-nav">
                <NavItem icon="feed" label="सुचना" page="news" activePage={activePage} setActivePage={setActivePage} />
                <NavItem icon="church" label="आरधना" page="worship" activePage={activePage} setActivePage={setActivePage} />
                <NavItem icon="podcasts" label="Podcasts" page="podcasts" activePage={activePage} setActivePage={setActivePage} />
                <NavItem icon="auto_stories" label="बाइबल" page="bible" activePage={activePage} setActivePage={setActivePage} />
                <NavItem icon="groups" label="संगतिहरु" page="chat" activePage={activePage} setActivePage={setActivePage} />
                <NavItem icon="volunteer_activism" label="प्रार्थना" page="prayer" activePage={activePage} setActivePage={setActivePage} />
            </nav>
            {isNotificationPanelOpen && <NotificationPanel onClose={() => setIsNotificationPanelOpen(false)} />}
        </div>
    );
};

const NavItem: React.FC<{
    icon: string;
    label: string;
    page: Page;
    activePage: Page;
    setActivePage: (page: Page) => void;
}> = ({ icon, label, page, activePage, setActivePage }) => (
    <button className={`nav-item ${activePage === page ? 'active' : ''}`} onClick={() => setActivePage(page)}>
        <span className="material-symbols-outlined">{icon}</span>
        <span>{label}</span>
    </button>
);

const NotificationPanel: React.FC<{onClose: () => void}> = ({onClose}) => {
    // Mock data for now
    const notifications: Notification[] = [
        // { id: '1', icon: 'volunteer_activism', message: 'John Doe prayed for your request.', timestamp: '5m ago'},
        // { id: '2', icon: 'comment', message: 'Jane Smith commented on your request.', timestamp: '1h ago'},
        // { id: '3', icon: 'groups', message: 'You have a new message from Support.', timestamp: '2d ago'}
    ];
    
    return (
        <>
            <div className="modal-backdrop" onClick={onClose} style={{backgroundColor: 'rgba(0,0,0,0.2)'}}></div>
            <div className="notification-panel">
                 <header className="notification-header">
                    <h3>Notifications</h3>
                </header>
                <div className="notification-list">
                    {notifications.length > 0 ? (
                        notifications.map(n => (
                            <div key={n.id} className="notification-item">
                                <span className="material-symbols-outlined notification-icon">{n.icon}</span>
                                <div className="notification-content">
                                    <p>{n.message}</p>
                                    <span className="notification-timestamp">{n.timestamp}</span>
                                </div>
                            </div>
                        ))
                    ) : (
                        <p className="no-notifications">No new notifications.</p>
                    )}
                </div>
            </div>
        </>
    )
}


class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean; error: Error | null }> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("Uncaught error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError && this.state.error) {
      return <ErrorFallback error={this.state.error} />;
    }
    return this.props.children;
  }
}


const rootElement = document.getElementById('root');
if (rootElement) {
    const root = ReactDOM.createRoot(rootElement);
    const firebaseServices = initializeFirebaseServices();
    root.render(
        <React.StrictMode>
            <ErrorBoundary>
                <FirebaseContext.Provider value={firebaseServices}>
                    <App />
                </FirebaseContext.Provider>
            </ErrorBoundary>
        </React.StrictMode>
    );
}
