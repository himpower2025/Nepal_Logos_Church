import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import { auth, db, storage } from './firebase';
import { 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    onAuthStateChanged,
    signOut
} from "firebase/auth";
import { 
    collection, 
    addDoc, 
    onSnapshot, 
    query, 
    orderBy, 
    doc, 
    updateDoc, 
    serverTimestamp,
    getDoc,
    setDoc,
    arrayUnion,
    Timestamp,
    where,
    getDocs,
    arrayRemove
} from "firebase/firestore";
import { ref, getDownloadURL, uploadBytes } from "firebase/storage";

// --- Types ---
type User = { id: string; name: string; email: string; avatar: string; };
type Church = { id: string; name: string; logo: string; offeringDetails: any; streamingInfo: any; };
type Comment = { id: string; author: User; content: string; createdAt: Timestamp; };
type PrayerRequest = { id: string; author: User; title: string; content: string; image?: string; prayedBy: string[]; comments: Comment[]; createdAt: Timestamp; };
type Podcast = { id: string; title: string; author: User; audioUrl: string; createdAt: Timestamp; };
type NewsItem = { id: string; title: string; date: string; content: string; image?: string; };
type Verse = { verse: string; text: string; };
type Message = { id: string; senderId: string; sender?: User; content: string; type: 'text' | 'image'; mediaUrl?: string; createdAt: Timestamp; };
type Chat = { 
    id: string; 
    participantIds: string[]; 
    participants: User[]; 
    messages: Message[]; 
    lastMessageTimestamp: Timestamp; 
    isGroup: boolean;
    name?: string;
    groupAvatar?: string;
};
type Notification = {
    id: string;
    icon: string; // material symbol name
    message: string;
    timestamp: string;
};


// --- Static Config & Data ---
const CHURCH: Church = {
    id: 'nepal_logos', name: 'Logos Church, Nepal', logo: '/logos-church-new-logo.jpg',
    offeringDetails: { qrCodeUrl: '/logos-qr-code.png', bankName: 'Global IME Bank', accountHolder: 'YAM PRADHAN', accountNumber: '10507010042662' },
    streamingInfo: { twitchChannel: 'logostvcnepal' }
};
const MOCK_NEWS: NewsItem[] = [];
const MOCK_VERSES_OF_THE_DAY: Verse[] = [
    { verse: 'यूहन्ना ३:१६', text: 'किनभने परमेश्‍वरले संसारलाई यति साह्रो प्रेम गर्नुभयो, कि उहाँले आफ्‍ना एकमात्र पुत्र दिनुभयो, ताकि उहाँमाथि विश्‍वास गर्ने कोही पनि नाश नहोस्, तर त्‍यसले अनन्त जीवन पाओस्।' },
    { verse: 'फिलिप्पी ४:१३', text: 'जसले मलाई शक्ति दिनuहुन्छ, उहाँमा म सब कुरा गर्न सक्छु।' }
];
const MOCK_NOTIFICATIONS: Notification[] = [
    { id: 'n1', icon: 'chat_bubble', message: 'Pastor Ramesh commented on your prayer request.', timestamp: '2 hours ago' },
    { id: 'n2', icon: 'podcasts', message: 'New podcast episode "Faith in Action" is available.', timestamp: '1 day ago' },
    { id: 'n3', icon: 'volunteer_activism', message: 'Jane Smith is praying for your request "Family Health".', timestamp: '3 days ago' },
];
const MCHEYNE_READING_PLAN = [
    'उत्पत्ति १, मत्ती १, एज्रा १, प्रेरित १', 'उत्पत्ति २, मत्ती २, एज्रा २, प्रेरित २', 'उत्पत्ति ३, मत्ती ३, एज्रा ३, प्रेरित ३', 'उत्पत्ति ४, मत्ती ४, एज्रा ४, प्रेरित ४',
    'उत्पत्ति ५, मत्ती ५, एज्रा ५, प्रेरित ५', 'उत्पत्ति ६, मत्ती ६, एज्रा ६, प्रेरित ६', 'उत्पत्ति ७, मत्ती ७, एज्रा ७, प्रेरित ७', 'उत्पत्ति ८, मत्ती ८, एज्रा ८, प्रेरित ८',
    'उत्पत्ति ९, मत्ती ९, एज्रा ९, प्रेरित ९', 'उत्पत्ति १०, मत्ती १०, एज्रा १०, प्रेरित १०', 'उत्पत्ति ११, मत्ती ११, नहेम्याह १, प्रेरित ११', 'उत्पत्ति १२, मत्ती १२, नहेम्याह २, प्रेरित १२',
    'उत्पत्ति १३, मत्ती १३, नहेम्याह ३, प्रेरित १३', 'उत्पत्ति १४, मत्ती १४, नहेम्याह ४, प्रेरित १४', 'उत्पत्ति १५, मत्ती १५, नहेम्याह ५, प्रेरित १५', 'उत्पत्ति १६, मत्ती १६, नहेम्याह ६, प्रेरित १६',
    'उत्पत्ति १७, मत्ती १७, नहेम्याह ७, प्रेरित १७', 'उत्पत्ति १८, मत्ती १८, नहेम्याह ८, प्रेरित १८', 'उत्पत्ति १९, मत्ती १९, नहेम्याह ९, प्रेरित १९', 'उत्पत्ति २०, मत्ती २०, नहेम्याह १०, प्रेरित २०',
    'उत्पत्ति २१, मत्ती २१, नहेम्याह ११, प्रेरित २१', 'उत्पत्ति २२, मत्ती २२, नहेम्याह १२, प्रेरित २२', 'उत्पत्ति २३, मत्ती २३, नहेम्याह १३, प्रेरित २३', 'उत्पत्ति २४, मत्ती २४, एस्तर १, प्रेरित २४',
    'उत्पत्ति २५, मत्ती २५, एस्तर २, प्रेरित २५', 'उत्पत्ति २६, मत्ती २६, एस्तर ३, प्रेरित २६', 'उत्पत्ति २७, मत्ती २७, एस्तर ४, प्रेरित २७', 'उत्पत्ति २८, मत्ती २८, एस्तर ५, प्रेरित २८',
    'उत्पत्ति २९, मर्कूस १, एस्तर ६, रोमी १', 'उत्पत्ति ३०, मर्कूस २, एस्तर ७, रोमी २', 'उत्पत्ति ३१, मर्कूस ३, एस्तर ८, रोमी ३', 'उत्पत्ति ३२, मर्कूस ४, एस्तर ९, रोमी ४',
    'उत्पत्ति ३३, मर्कूस ५, एस्तर १०, रोमी ५', 'उत्पत्ति ३४, मर्कूस ६, अय्यूब १, रोमी ६', 'उत्पत्ति ३५, मर्कूस ७, अय्यूब २, रोमी ७', 'उत्पत्ति ३६, मर्कूस ८, अय्यूब ३, रोमी ८',
    'उत्पत्ति ३७, मर्कूस ९, अय्यूब ४, रोमी ९', 'उत्पत्ति ३८, मर्कूस १०, अय्यूब ५, रोमी १०', 'उत्पत्ति ३९, मर्कूस ११, अय्यूब ६, रोमी ११', 'उत्पत्ति ४०, मर्कूस १२, अय्यूब ७, रोमी १२',
    'उत्पत्ति ४१, मर्कूस १३, अय्यूब ८, रोमी १३', 'उत्पत्ति ४२, मर्कूस १४, अय्यूब ९, रोमी १४', 'उत्पत्ति ४३, मर्कूस १५, अय्यूब १०, रोमी १५', 'उत्पत्ति ४४, मर्कूस १६, अय्यूब ११, रोमी १६',
    'उत्पत्ति ४५, लूका १, अय्यूब १२, १ कोरिन्थी १', 'उत्पत्ति ४६, लूका २, अय्यूब १३, १ कोरिन्थी २', 'उत्पत्ति ४७, लूका ३, अय्यूब १४, १ कोरिन्थी ३', 'उत्पत्ति ४८, लूका ४, अय्यूब १५, १ कोरिन्थी ४',
    'उत्पत्ति ४९, लूका ५, अय्यूब १६, १ कोरिन्थी ५', 'उत्पत्ति ५०, लूका ६, अय्यूब १७, १ कोरिन्थी ६', 'प्रस्थान १, लूका ७, अय्यूब १८, १ कोरिन्थी ७', 'प्रस्थान २, लूका ८, अय्यूब १९, १ कोरिन्थी ८',
    'प्रस्थान ३, लूका ९, अय्यूब २०, १ कोरिन्थी ९', 'प्रस्थान ४, लूका १०, अय्यूब २१, १ कोरिन्थी १०', 'प्रस्थान ५, लूका ११, अय्यूब २२, १ कोरिन्थी ११', 'प्रस्थान ६, लूका १२, अय्यूब २३, १ कोरिन्थी १२',
    'प्रस्थान ७, लूका १३, अय्यूब २४, १ कोरिन्थी १३', 'प्रस्थान ८, लूका १४, अय्यूब २५, १ कोरिन्थी १४', 'प्रस्थान ९, लूका १५, अय्यूब २६, १ कोरिन्थी १५', 'प्रस्थान १०, लूका १६, अय्यूब २७, १ कोरिन्थी १६',
    'प्रस्थान ११, लूका १७, अय्यूब २८, २ कोरिन्थी १', 'प्रस्थान १२, लूका १८, अय्यूब २९, २ कोरिन्थी २', 'प्रस्थान १३, लूका १९, अय्यूब ३०, २ कोरिन्थी ३', 'प्रस्थान १४, लूका २०, अय्यूब ३१, २ कोरिन्थी ४',
    'प्रस्थान १५, लूका २१, अय्यूब ३२, २ कोरिन्थी ५', 'प्रस्थान १६, लूका २२, अय्यूब ३३, २ कोरिन्थी ६', 'प्रस्थान १७, लूका २३, अय्यूब ३४, २ कोरिन्थी ७', 'प्रस्थान १८, लूका २४, अय्यूब ३५, २ कोरिन्थी ८',
    'प्रस्थान १९, यूहन्ना १, अय्यूब ३६, २ कोरिन्थी ९', 'प्रस्थान २०, यूहन्ना २, अय्यूब ३७, २ कोरिन्थी १०', 'प्रस्थान २१, यूहन्ना ३, अय्यूब ३८, २ कोरिन्थी ११', 'प्रस्थान २२, यूहन्ना ४, अय्यूब ३९, २ कोरिन्थी १२',
    'प्रस्थान २३, यूहन्ना ५, अय्यूब ४०, २ कोरिन्थी १३', 'प्रस्थान २४, यूहन्ना ६, अय्यूब ४१, गलाती १', 'प्रस्थान २५, यूहन्ना ७, अय्यूब ४२, गलाती २', 'प्रस्थान २६, यूहन्ना ८, भजनसंग्रह १-४, गलाती ३',
    'प्रस्थान २७, यूहन्ना ९, भजनसंग्रह ५-७, गलाती ४', 'प्रस्थान २८, यूहन्ना १०, भजनसंग्रह ८-९, गलाती ५', 'प्रस्थान २९, यूहन्ना ११, भजनसंग्रह १०-११, गलाती ६', 'प्रस्थान ३०, यूहन्ना १२, भजनसंग्रह १२-१४, एफिसी १',
    'प्रस्थान ३१, यूहन्ना १३, भजनसंग्रह १५-१६, एफिसी २', 'प्रस्थान ३२, यूहन्ना १४, भजनसंग्रह १७, एफिसी ३', 'प्रस्थान ३३, यूहन्ना १५, भजनसंग्रह १८, एफिसी ४', 'प्रस्थान ३४, यूहन्ना १६, भजनसंग्रह १९, एफिसी ५',
    'प्रस्थान ३५, यूहन्ना १७, भजनसंग्रह २०-२१, एफिसी ६', 'प्रस्थान ३६, यूहन्ना १८, भजनसंग्रह २२, फिलिप्पी १', 'प्रस्थान ३७, यूहन्ना १९, भजनसंग्रह २३-२४, फिलिप्पी २', 'प्रस्थान ३८, यूहन्ना २०, भजनसंग्रह २५-२६, फिलिप्पी ३',
    'प्रस्थान ३९, यूहन्ना २१, भजनसंग्रह २७-२९, फिलिप्पी ४', 'प्रस्थान ४०, प्रेरित १, भजनसंग्रह ३०-३१, कलस्सी १', 'लेवी १, प्रेरित २, भजनसंग्रह ३२, कलस्सी २', 'लेवी २, प्रेरित ३, भजनसंग्रह ३३, कलस्सी ३',
    'लेवी ३, प्रेरित ४, भजनसंग्रह ३४, कलस्सी ४', 'लेवी ४, प्रेरित ५, भजनसंग्रह ३५, १ थिस्सलोनिकी १', 'लेवी ५, प्रेरित ६, भजनसंग्रह ३६, १ थिस्सलोनिकी २', 'लेवी ६, प्रेरित ७, भजनसंग्रह ३७, १ थिस्सलोनिकी ३',
    'लेवी ७, प्रेरित ८, भजनसंग्रह ३८, १ थिस्सलोनिकी ४', 'लेवी ८, प्रेरित ९, भजनसंग्रह ३९, १ थिस्सलोनिकी ५', 'लेवी ९, प्रेरित १०, भजनसंग्रह ४०-४१, २ थिस्सलोनिकी १', 'लेवी १०, प्रेरित ११, भजनसंग्रह ४२-४३, २ थिस्सलोनिकी २',
    'लेवी ११, प्रेरित १२, भजनसंग्रह ४४-४५, २ थिस्सलोनिकी ३', 'लेवी १२, प्रेरित १३, भजनसंग्रह ४६-४७, १ तिमोथी १', 'लेवी १३, प्रेरित १४, भजनसंग्रह ४८-४९, १ तिमोथी २', 'लेवी १४, प्रेरित १५, भजनसंग्रह ५०, १ तिमोथी ३',
    'लेवी १५, प्रेरित १६, भजनसंग्रह ५१, १ तिमोथी ४', 'लेवी १६, प्रेरित १७, भजनसंग्रह ५२-५४, १ तिमोथी ५', 'लेवी १७, प्रेरित १८, भजनसंग्रह ५५, १ तिमोथी ६', 'लेवी १८, प्रेरित १९, भजनसंग्रह ५६-५७, २ तिमोथी १',
    'लेवी १९, प्रेरित २०, भजनसंग्रह ५८-५९, २ तिमोथी २', 'लेवी २०, प्रेरित २१, भजनसंग्रह ६०-६२, २ तिमोथी ३', 'लेवी २१, प्रेरित २२, भजनसंग्रह ६३-६५, २ तिमोथी ४', 'लेवी २२, प्रेरित २३, भजनसंग्रह ६६-६७, तीतस १',
    'लेवी २३, प्रेरित २४, भजनसंग्रह ६८, तीतस २', 'लेवी २४, प्रेरित २५, भजनसंग्रह ६९, तीतस ३', 'लेवी २५, प्रेरित २६, भजनसंग्रह ७०-७१, फिलेमोन', 'लेवी २६, प्रेरित २७, भजनसंग्रह ७२, हिब्रू १',
    'लेवी २७, प्रेरित २८, भजनसंग्रह ७३-७४, हिब्रू २', 'गन्ती १, रोमी १, भजनसंग्रह ७५-७६, हिब्रू ३', 'गन्ती २, रोमी २, भजनसंग्रह ७७, हिब्रू ४', 'गन्ती ३, रोमी ३, भजनसंग्रह ७८, हिब्रू ५',
    'गन्ती ४, रोमी ४, भजनसंग्रह ७९, हिब्रू ६', 'गन्ती ५, रोमी ५, भजनसंग्रह ८०, हिब्रू ७', 'गन्ती ६, रोमी ६, भजनसंग्रह ८१-८२, हिब्रू ८', 'गन्ती ७, रोमी ७, भजनसंग्रह ८३-८४, हिब्रू ९',
    'गन्ती ८, रोमी ८, भजनसंग्रह ८५-८६, हिब्रू १०', 'गन्ती ९, रोमी ९, भजनसंग्रह ८७-८८, हिब्रू ११', 'गन्ती १०, रोमी १०, भजनसंग्रह ८९, हिब्रू १२', 'गन्ती ११, रोमी ११, भजनसंग्रह ९०-९१, हिब्रू १३',
    'गन्ती १२, रोमी १२, भजनसंग्रह ९२-९४, याकूब १', 'गन्ती १३, रोमी १३, भजनसंग्रह ९५-९६, याकूब २', 'गन्ती १४, रोमी १४, भजनसंग्रह ९७-९९, याकूब ३', 'गन्ती १५, रोमी १५, भजनसंग्रह १००-१०२, याकूब ४',
    'गन्ती १६, रोमी १६, भजनसंग्रह १०३, याकूब ५', 'गन्ती १७, १ कोरिन्थी १, भजनसंग्रह १०४, १ पत्रुस १', 'गन्ती १८, १ कोरिन्थी २, भजनसंग्रह १०५, १ पत्रुस २', 'गन्ती १९, १ कोरिन्थी ३, भजनसंग्रह १०६, १ पत्रुस ३',
    'गन्ती २०, १ कोरिन्थी ४, भजनसंग्रह १०७, १ पत्रुस ४', 'गन्ती २१, १ कोरिन्थी ५, भजनसंग्रह १०८-१०९, १ पत्रुस ५', 'गन्ती २२, १ कोरिन्थी ६, भजनसंग्रह ११०-१११, २ पत्रुस १', 'गन्ती २३, १ कोरिन्थी ७, भजनसंग्रह ११२-११४, २ पत्रुस २',
    'गन्ती २४, १ कोरिन्थी ८, भजनसंग्रह ११५-११६, २ पत्रुस ३', 'गन्ती २५, १ कोरिन्थी ९, भजनसंग्रह ११७-११८, १ यूहन्ना १', 'गन्ती २६, १ कोरिन्थी १०, भजनसंग्रह ११९:१-२४, १ यूहन्ना २', 'गन्ती २७, १ कोरिन्थी ११, भजनसंग्रह ११९:२५-४८, १ यूहन्ना ३',
    'गन्ती २८, १ कोरिन्थी १२, भजनसंग्रह ११९:४९-७२, १ यूहन्ना ४', 'गन्ती २९, १ कोरिन्थी १३, भजनसंग्रह ११९:७३-९६, १ यूहन्ना ५', 'गन्ती ३०, १ कोरिन्थी १४, भजनसंग्रह ११९:९७-१२०, २ यूहन्ना', 'गन्ती ३१, १ कोरिन्थी १५, भजनसंग्रह ११९:१२१-१४४, ३ यूहन्ना',
    'गन्ती ३２, १ कोरिन्थी १६, भजनसंग्रह ११९:१४५-१७६, यहूदा', 'गन्ती ३३, २ कोरिन्थी १, भजनसंग्रह १२०-१२२, प्रकाश १', 'गन्ती ३४, २ कोरिन्थी २, भजनसंग्रह १२३-१२५, प्रकाश २', 'गन्ती ३५, २ कोरिन्थी ३, भजनसंग्रह १२६-१२८, प्रकाश ३',
    'गन्ती ३६, २ कोरिन्थी ४, भजनसंग्रह १२९-१३१, प्रकाश ४', 'व्यवस्था १, २ कोरिन्थी ५, भजनसंग्रह १३२-१३४, प्रकाश ५', 'व्यवस्था २, २ कोरिन्थी ६, भजनसंग्रह १३५-१३६, प्रकाश ६', 'व्यवस्था ३, २ कोरिन्थी ७, भजनसंग्रह १३७-१३८, प्रकाश ७',
    'व्यवस्था ४, २ कोरिन्थी ८, भजनसंग्रह १३९, प्रकाश ८', 'व्यवस्था ५, २ कोरिन्थी ९, भजनसंग्रह १४०-१४१, प्रकाश ९', 'व्यवस्था ६, २ कोरिन्थी १०, भजनसंग्रह १४२-१४३, प्रकाश १०', 'व्यवस्था ७, २ कोरिन्थी ११, भजनसंग्रह १४४-१४५, प्रकाश ११',
    'व्यवस्था ८, २ कोरिन्थी १२, भजनसंग्रह १४६-१४७, प्रकाश १२', 'व्यवस्था ९, २ कोरिन्थी १३, भजनसंग्रह १४८-१५०, प्रकाश १३', 'व्यवस्था १०, गलाती १, हितोपदेश १, प्रकाश १४', 'व्यवस्था ११, गलाती २, हितोपदेश २, प्रकाश १५',
    'व्यवस्था १२, गलाती ३, हितोपदेश ३, प्रकाश १६', 'व्यवस्था १३, गलाती ४, हितोपदेश ४, प्रकाश १७', 'व्यवस्था १४, गलाती ५, हितोपदेश ५, प्रकाश १८', 'व्यवस्था १५, गलाती ६, हितोपदेश ६, प्रकाश १९',
    'व्यवस्था १६, एफिसी १, हितोपदेश ७, प्रकाश २०', 'व्यवस्था १७, एफिसी २, हितोपदेश ८, प्रकाश २१', 'व्यवस्था १८, एफिसी ३, हितोपदेश ९, प्रकाश २२', 'व्यवस्था १९, एफिसी ४, उपदेशक १, मत्ती १',
    'व्यवस्था २०, एफिसी ५, उपदेशक २, मत्ती २', 'व्यवस्था २१, एफिसी ६, उपदेशक ३, मत्ती ३', 'व्यवस्था २२, फिलिप्पी १, उपदेशक ४, मत्ती ४', 'व्यवस्था २३, फिलिप्पी २, उपदेशक ५, मत्ती ५',
    'व्यवस्था २४, फिलिप्पी ३, उपदेशक ६, मत्ती ६', 'व्यवस्था २५, फिलिप्पी ४, उपदेशक ७, मत्ती ७', 'व्यवस्था २६, कलस्सी १, उपदेशक ८, मत्ती ८', 'व्यवस्था २७, कलस्सी २, उपदेशक ९, मत्ती ९',
    'व्यवस्था २८, कलस्सी ३, उपदेशक १०, मत्ती १०', 'व्यवस्था २९, कलस्सी ४, उपदेशक ११, मत्ती ११', 'व्यवस्था ३०, १ थिस्सलोनिकी १, उपदेशक १२, मत्ती १२', 'व्यवस्था ३१, १ थिस्सलोनिकी २, श्रेष्ठगीत १, मत्ती १३',
    'व्यवस्था ३２, १ थिस्सलोनिकी ३, श्रेष्ठगीत २, मत्ती १४', 'व्यवस्था ३३, १ थिस्सलोनिकी ४, श्रेष्ठगीत ३, मत्ती १५', 'व्यवस्था ३४, १ थिस्सलोनिकी ५, श्रेष्ठगीत ४, मत्ती १६', 'यहोशू १, २ थिस्सलोनिकी १, श्रेष्ठगीत ५, मत्ती १७',
    'यहोशू २, २ थिस्सलोनिकी २, श्रेष्ठगीत ६, मत्ती १८', 'यहोशू ३, २ थिस्सलोनिकी ३, श्रेष्ठगीत ७, मत्ती १९', 'यहोशू ४, १ तिमोथी १, श्रेष्ठगीत ८, मत्ती २०', 'यहोशू ५, १ तिमोथी २, यशैया १, मत्ती २१',
    'यहोशू ६, १ तिमोथी ३, यशैया २, मत्ती २२', 'यहोशू ७, १ तिमोथी ४, यशैया ३, मत्ती २३', 'यहोशू ८, १ तिमोथी ५, यशैया ४, मत्ती २४', 'यहोशू ९, १ तिमोथी ६, यशैया ५, मत्ती २५',
    'यहोशू १०, २ तिमोथी १, यशैया ६, मत्ती २६', 'यहोशू ११, २ तिमोथी २, यशैया ७, मत्ती २७', 'यहोशू १२, २ तिमोथी ३, यशैया ८, मत्ती २८', 'यहोशू १३, २ तिमोथी ४, यशैया ९, मर्कूस १',
    'यहोशू १४, तीतस १, यशैया १०, मर्कूस २', 'यहोशू १५, तीतस २, यशैया ११, मर्कूस ३', 'यहोशू १६, तीतस ३, यशैया १२, मर्कूस ४', 'यहोशू १७, फिलेमोन, यशैया १३, मर्कूस ५',
    'यहोशू १८, हिब्रू १, यशैया १४, मर्कूस ६', 'यहोशू १९, हिब्रू २, यशैया १५, मर्कूस ७', 'यहोशू २०, हिब्रू ३, यशैया १६, मर्कूस ८', 'यहोशू २१, हिब्रू ४, यशैया १७, मर्कूस ९',
    'यहोशू २२, हिब्रू ५, यशैया १८, मर्कूस १०', 'यहोशू २३, हिब्रू ६, यशैया १९, मर्कूस ११', 'यहोशू २४, हिब्रू ७, यशैया २०, मर्कूस १२', 'न्यायकर्ता १, हिब्रू ८, यशैया २१, मर्कूस १३',
    'न्यायकर्ता २, हिब्रू ९, यशैया २२, मर्कूस १४', 'न्यायकर्ता ३, हिब्रू १०, यशैया २३, मर्कूस १५', 'न्यायकर्ता ४, हिब्रू ११, यशैया २४, मर्कूस १६', 'न्यायकर्ता ५, हिब्रू १२, यशैया २५, लूका १',
    'न्यायकर्ता ६, हिब्रू १३, यशैया २६, लूका २', 'न्यायकर्ता ७, याकूब १, यशैया २७, लूका ३', 'न्यायकर्ता ८, याकूब २, यशैया २८, लूका ४', 'न्यायकर्ता ९, याकूब ३, यशैया २९, लूका ५',
    'न्यायकर्ता १०, याकूब ४, यशैया ३०, लूका ६', 'न्यायकर्ता ११, याकूब ५, यशैया ३१, लूका ७', 'न्यायकर्ता १२, १ पत्रुस १, यशैया ३२, लूका ८', 'न्यायकर्ता १३, १ पत्रुस २, यशैया ३३, लूका ९',
    'न्यायकर्ता १४, १ पत्रुस ३, यशैया ३४, लूका १०', 'न्यायकर्ता १५, १ पत्रुस ४, यशैया ३५, लूका ११', 'न्यायकर्ता १६, १ पत्रुस ५, यशैया ३६, लूका १२', 'न्यायकर्ता १७, २ पत्रुस १, यशैया ३७, लूका १३',
    'न्यायकर्ता १८, २ पत्रुस २, यशैया ३८, लूका १४', 'न्यायकर्ता १९, २ पत्रुस ३, यशैया ३९, लूका १५', 'न्यायकर्ता २०, १ यूहन्ना १, यशैया ४०, लूका १६', 'न्यायकर्ता २१, १ यूहन्ना २, यशैया ४१, लूका १७',
    'रूथ १, १ यूहन्ना ३, यशैया ४२, लूका १८', 'रूथ २, १ यूहन्ना ४, यशैया ४३, लूका १९', 'रूथ ३, १ यूहन्ना ५, यशैया ४४, लूका २०', 'रूथ ४, २ यूहन्ना, यशैया ४५, लूका २१',
    '१ शमूएल १, ३ यूहन्ना, यशैया ४६, लूका २२', '१ शमूएल २, यहूदा, यशैया ४७, लूका २३', '१ शमूएल ३, प्रकाश १, यशैया ४८, लूका २४', '१ शमूएल ४, प्रकाश २, यशैया ४९, यूहन्ना १',
    '१ शमूएल ५, प्रकाश ३, यशैया ५०, यूहन्ना २', '१ शमूएल ६, प्रकाश ४, यशैया ५१, यूहन्ना ३', '१ शमूएल ७, प्रकाश ५, यशैया ५२, यूहन्ना ४', '१ शमूएल ८, प्रकाश ६, यशैया ५३, यूहन्ना ५',
    '१ शमूएल ९, प्रकाश ७, यशैया ५४, यूहन्ना ६', '१ शमूएल १०, प्रकाश ८, यशैया ५५, यूहन्ना ७', '१ शमूएल ११, प्रकाश ९, यशैया ५६, यूहन्ना ८', '१ शमूएल १२, प्रकाश १०, यशैया ५७, यूहन्ना ९',
    '१ शमूएल १३, प्रकाश ११, यशैया ५८, यूहन्ना १०', '१ शमूएल १४, प्रकाश १२, यशैया ५९, यूहन्ना ११', '१ शमूएल १५, प्रकाश १३, यशैया ६०, यूहन्ना १२', '१ शमूएल १६, प्रकाश १४, यशैया ६१, यूहन्ना १३',
    '१ शमूएल १७, प्रकाश १५, यशैया ६२, यूहन्ना १४', '१ शमूएल १८, प्रकाश १६, यशैया ६३, यूहन्ना १५', '१ शमूएल १९, प्रकाश १७, यशैया ६४, यूहन्ना १६', '१ शमूएल २०, प्रकाश १८, यशैया ६५, यूहन्ना १७',
    '१ शमूएल २१, प्रकाश १९, यशैया ६६, यूहन्ना १८', '१ शमूएल २२, प्रकाश २०, यर्मिया १, यूहन्ना १९', '१ शमूएल २३, प्रकाश २१, यर्मिया २, यूहन्ना २०', '१ शमूएल २४, प्रकाश २२, यर्मिया ३, यूहन्ना २१',
    '१ शमूएल २५, मत्ती १, यर्मिया ४, प्रेरित १', '१ शमूएल २६, मत्ती २, यर्मिया ५, प्रेरित २', '१ शमूएल २७, मत्ती ३, यर्मिया ६, प्रेरित ३', '१ शमूएल २८, मत्ती ४, यर्मिया ७, प्रेरित ४',
    '१ शमूएल २९, मत्ती ५, यर्मिया ८, प्रेरित ५', '१ शमूएल ३०, मत्ती ६, यर्मिया ९, प्रेरित ६', '१ शमूएल ३१, मत्ती ७, यर्मिया १०, प्रेरित ७', '२ शमूएल १, मत्ती ८, यर्मिया ११, प्रेरित ८',
    '२ शमूएल २, मत्ती ९, यर्मिया १२, प्रेरित ९', '२ शमूएल ३, मत्ती १०, यर्मिया १३, प्रेरित १०', '२ शमूएल ४, मत्ती ११, यर्मिया १४, प्रेरित ११', '२ शमूएल ५, मत्ती १२, यर्मिया १५, प्रेरित १२',
    '२ शमूएल ६, मत्ती १३, यर्मिया १६, प्रेरित १३', '२ शमूएल ७, मत्ती १४, यर्मिया १७, प्रेरित १४', '२ शमूएल ८, मत्ती १५, यर्मिया १८, प्रेरित १५', '२ शमूएल ९, मत्ती १६, यर्मिया १९, प्रेरित १६',
    '२ शमूएल १०, मत्ती १७, यर्मिया २०, प्रेरित १७', '२ शमूएल ११, मत्ती १८, यर्मिया २१, प्रेरित १८', '२ शमूएल १२, मत्ती १९, यर्मिया २２, प्रेरित १९', '२ शमूएल १३, मत्ती २०, यर्मिया २३, प्रेरित २०',
    '२ शमूएल १४, मत्ती २१, यर्मिया २४, प्रेरित २१', '२ शमूएल १५, मत्ती २２, यर्मिया २५, प्रेरित २२', '२ शमूएल १६, मत्ती २३, यर्मिया २६, प्रेरित २३', '२ शमूएल १७, मत्ती २४, यर्मिया २७, प्रेरित २४',
    '२ शमूएल १८, मत्ती २५, यर्मिया २८, प्रेरित २५', '२ शमूएल १९, मत्ती २६, यर्मिया २९, प्रेरित २६', '२ शमूएल २०, मत्ती २७, यर्मिया ३०, प्रेरित २७', '२ शमूएल २१, मत्ती २८, यर्मिया ३१, प्रेरित २८',
    '२ शमूएल २２, मर्कूस १, यर्मिया ३２, रोमी १', '२ शमूएल २३, मर्कूस २, यर्मिया ३३, रोमी २', '२ शमूएल २४, मर्कूस ३, यर्मिया ३४, रोमी ३', '१ राजा १, मर्कूस ४, यर्मिया ३५, रोमी ४',
    '१ राजा २, मर्कूस ५, यर्मिया ३६, रोमी ५', '१ राजा ३, मर्कूस ६, यर्मिया ३७, रोमी ६', '१ राजा ४, मर्कूस ७, यर्मिया ३८, रोमी ७', '१ राजा ५, मर्कूस ८, यर्मिया ३९, रोमी ८',
    '१ राजा ६, मर्कूस ९, यर्मिया ४०, रोमी ९', '१ राजा ७, मर्कूस १०, यर्मिया ४１, रोमी १०', '१ राजा ८, मर्कूस ११, यर्मिया ४２, रोमी ११', '१ राजा ९, मर्कूस १२, यर्मिया ४३, रोमी १२',
    '१ राजा १०, मर्कूस १३, यर्मिया ४४, रोमी १३', '१ राजा ११, मर्कूस १४, यर्मिया ४५, रोमी १४', '१ राजा १२, मर्कूस १५, यर्मिया ४६, रोमी १५', '१ राजा १३, मर्कूस १६, यर्मिया ४७, रोमी १६',
    '१ राजा १४, लूका १, यर्मिया ४८, १ कोरिन्थी १', '१ राजा १५, लूका २, यर्मिया ४९, १ कोरिन्थी २', '१ राजा १६, लूका ३, यर्मिया ५०, १ कोरिन्थी ३', '१ राजा १७, लूका ४, यर्मिया ५१, १ कोरिन्थी ४',
    '१ राजा १८, लूका ५, यर्मिया ५२, १ कोरिन्थी ५', '१ राजा १९, लूका ६, विलाप १, १ कोरिन्थी ६', '१ राजा २०, लूका ७, विलाप २, १ कोरिन्थी ७', '१ राजा २१, लूका ८, विलाप ३, १ कोरिन्थी ८',
    '१ राजा २２, लूका ९, विलाप ४, १ कोरिन्थी ९', '२ राजा १, लूका १०, विलाप ५, १ कोरिन्थी १०', '२ राजा २, लूका ११, इजकिएल १, १ कोरिन्थी ११', '२ राजा ३, लूका १२, इजकिएल २, १ कोरिन्थी १२',
    '२ राजा ४, लूका १३, इजकिएल ३, १ कोरिन्थी १३', '२ राजा ५, लूका १४, इजकिएल ४, १ कोरिन्थी १४', '२ राजा ६, लूका १५, इजकिएल ५, १ कोरिन्थी १५', '२ राजा ७, लूका १६, इजकिएल ६, १ कोरिन्थी १६',
    '२ राजा ८, लूका १७, इजकिएल ७, २ कोरिन्थी १', '२ राजा ९, लूका १८, इजकिएल ८, २ कोरिन्थी २', '२ राजा १०, लूका १९, इजकिएल ९, २ कोरिन्थी ३', '२ राजा ११, लूका २०, इजकिएल १०, २ कोरिन्थी ४',
    '२ राजा १२, लूका २१, इजकिएल ११, २ कोरिन्थी ५', '२ राजा १३, लूका २２, इजकिएल १२, २ कोरिन्थी ६', '२ राजा १४, लूका २३, इजकिएल १३, २ कोरिन्थी ७', '२ राजा १५, लूका २४, इजकिएल १४, २ कोरिन्थी ८',
    '२ राजा १६, यूहन्ना १, इजकिएल १५, २ कोरिन्थी ९', '२ राजा १७, यूहन्ना २, इजकिएल १६, २ कोरिन्थी १०', '२ राजा १८, यूहन्ना ३, इजकिएल १७, २ कोरिन्थी ११', '२ राजा १९, यूहन्ना ४, इजकिएल १८, २ कोरिन्थी १२',
    '२ राजा २०, यूहन्ना ५, इजकिएल १९, २ कोरिन्थी १३', '२ राजा २१, यूहन्ना ६, इजकिएल २०, गलाती १', '२ राजा २２, यूहन्ना ७, इजकिएल २१, गलाती २', '२ राजा २३, यूहन्ना ८, इजकिएल २２, गलाती ३',
    '२ राजा २४, यूहन्ना ९, इजकिएल २३, गलाती ४', '२ राजा २५, यूहन्ना १०, इजकिएल २४, गलाती ५', '१ इतिहास १, यूहन्ना ११, इजकिएल २५, गलाती ६', '१ इतिहास २, यूहन्ना १२, इजकिएल २६, एफिसी १',
    '१ इतिहास ३, यूहन्ना १३, इजकिएल २७, एफिसी २', '१ इतिहास ४, यूहन्ना १४, इजकिएल २८, एफिसी ३', '१ इतिहास ५, यूहन्ना १५, इजकिएल २९, एफिसी ४', '१ इतिहास ६, यूहन्ना १६, इजकिएल ३०, एफिसी ५',
    '१ इतिहास ७, यूहन्ना १७, इजकिएल ३１, एफिसी ६', '१ इतिहास ८, यूहन्ना १८, इजकिएल ३２, फिलिप्पी १', '१ इतिहास ९, यूहन्ना १९, इजकिएल ३３, फिलिप्पी २', '१ इतिहास १०, यूहन्ना २०, इजकिएल ३４, फिलिप्पी ३',
    '१ इतिहास ११, यूहन्ना २१, इजकिएल ३５, फिलिप्पी ४', '१ इतिहास १२, प्रेरित १, इजकिएल ३６, कलस्सी १', '१ इतिहास १३, प्रेरित २, इजकिएल ३７, कलस्सी २', '१ इतिहास १४, प्रेरित ३, इजकिएल ३８, कलस्सी ३',
    '१ इतिहास १५, प्रेरित ४, इजकिएल ३９, कलस्सी ४', '१ इतिहास १६, प्रेरित ५, इजकिएल ४０, १ थिस्सलोनिकी १', '१ इतिहास १७, प्रेरित ६, इजकिएल ४１, १ थिस्सलोनिकी २', '१ इतिहास १८, प्रेरित ७, इजकिएल ४２, १ थिस्सलोनिकी ३',
    '१ इतिहास १९, प्रेरित ८, इजकिएल ४３, १ थिस्सलोनिकी ४', '१ इतिहास २०, प्रेरित ९, इजकिएल ४４, १ थिस्सलोनिकी ५', '१ इतिहास २१, प्रेरित १०, इजकिएल ४５, २ थिस्सलोनिकी १', '१ इतिहास २２, प्रेरित ११, इजकिएल ४６, २ थिस्सलोनिकी २',
    '१ इतिहास २३, प्रेरित १२, इजकिएल ४７, २ थिस्सलोनिकी ३', '१ इतिहास २४, प्रेरित १३, इजकिएल ४８, १ तिमोथी १', '१ इतिहास २५, प्रेरित १४, दानिएल १, १ तिमोथी २', '१ इतिहास २६, प्रेरित १५, दानिएल २, १ तिमोथी ३',
    '१ इतिहास २७, प्रेरित १६, दानिएल ३, १ तिमोथी ४', '१ इतिहास २८, प्रेरित १७, दानिएल ४, १ तिमोथी ५', '१ इतिहास २९, प्रेरित १८, दानिएल ५, १ तिमोथी ६', '२ इतिहास १, प्रेरित १९, दानिएल ६, २ तिमोथी १',
    '२ इतिहास २, प्रेरित २०, दानिएल ७, २ तिमोथी २', '२ इतिहास ३, प्रेरित २१, दानिएल ८, २ तिमोथी ३', '२ इतिहास ४, प्रेरित २２, दानिएल ९, २ तिमोथी ४', '२ इतिहास ५, प्रेरित २३, दानिएल १०, तीतस १',
    '२ इतिहास ६, प्रेरित २४, दानिएल ११, तीतस २', '२ इतिहास ७, प्रेरित २५, दानिएल १२, तीतस ३', '२ इतिहास ८, प्रेरित २६, होशे १, फिलेमोन', '२ इतिहास ९, प्रेरित २७, होशे २, हिब्रू १',
    '२ इतिहास १०, प्रेरित २८, होशे ३, हिब्रू २', '२ इतिहास ११, रोमी १, होशे ४, हिब्रू ३', '२ इतिहास १२, रोमी २, होशे ५, हिब्रू ४', '२ इतिहास १३, रोमी ३, होशे ६, हिब्रू ५',
    '२ इतिहास १४, रोमी ४, होशे ७, हिब्रू ६', '२ इतिहास १५, रोमी ५, होशे ८, हिब्रू ७', '२ इतिहास १६, रोमी ६, होशे ९, हिब्रू ८', '२ इतिहास १७, रोमी ७, होशे १०, हिब्रू ९',
    '२ इतिहास १८, रोमी ८, होशे ११, हिब्रू १०', '२ इतिहास १९, रोमी ९, होशे १२, हिब्रू ११', '२ इतिहास २०, रोमी १०, होशे १३, हिब्रू १२', '२ इतिहास २१, रोमी ११, होशे १४, हिब्रू १३',
    '२ इतिहास २２, रोमी १२, योएल १, याकूब १', '२ इतिहास २३, रोमी १३, योएल २, याकूब २', '२ इतिहास २४, रोमी १४, योएल ३, याकूब ३', '२ इतिहास २५, रोमी १५, आमोस १, याकूब ४',
    '२ इतिहास २६, रोमी १६, आमोस २, याकूब ५', '२ इतिहास २७, १ कोरिन्थी १, आमोस ३, १ पत्रुस १', '२ इतिहास २८, १ कोरिन्थी २, आमोस ४, १ पत्रुस २', '२ इतिहास २९, १ कोरिन्थी ३, आमोस ५, १ पत्रुस ३',
    '२ इतिहास ३०, १ कोरिन्थी ४, आमोस ६, १ पत्रुस ४', '२ इतिहास ३१, १ कोरिन्थी ५, आमोस ७, १ पत्रुस ५', '२ इतिहास ३２, १ कोरिन्थी ६, आमोस ८, २ पत्रुस १', '२ इतिहास ३３, १ कोरिन्थी ७, आमोस ९, २ पत्रुस २',
    '२ इतिहास ३４, १ कोरिन्थी ८, ओबदिया, २ पत्रुस ३', '२ इतिहास ३５, १ कोरिन्थी ९, योना १, १ यूहन्ना १', '२ इतिहास ३６, १ कोरिन्थी १०, योना २, १ यूहन्ना २', 'एज्रा १, १ कोरिन्थी ११, योना ३, १ यूहन्ना ३',
    'एज्रा २, १ कोरिन्थी १२, योना ४, १ यूहन्ना ४', 'एज्रा ३, १ कोरिन्थी १३, मीका १, १ यूहन्ना ५', 'एज्रा ४, १ कोरिन्थी १४, मीका २, २ यूहन्ना', 'एज्रा ५, १ कोरिन्थी १५, मीका ३, ३ यूहन्ना',
    'एज्रा ६, १ कोरिन्थी १६, मीका ४, यहूदा', 'एज्रा ७, २ कोरिन्थी १, मीका ५, प्रकाश १', 'एज्रा ८, २ कोरिन्थी २, मीका ६, प्रकाश २', 'एज्रा ९, २ कोरिन्थी ३, मीका ७, प्रकाश ३',
    'एज्रा १०, २ कोरिन्थी ४, नहूम १, प्रकाश ४', 'नहेम्याह १, २ कोरिन्थी ५, नहूम २, प्रकाश ५', 'नहेम्याह २, २ कोरिन्थी ६, नहूम ३, प्रकाश ६', 'नहेम्याह ३, २ कोरिन्थी ७, हबकूक १, प्रकाश ७',
    'नहेम्याह ४, २ कोरिन्थी ८, हबकूक २, प्रकाश ८', 'नहेम्याह ५, २ कोरिन्थी ९, हबकूक ३, प्रकाश ९', 'नहेम्याह ६, २ कोरिन्थी १०, सपन्याह १, प्रकाश १०', 'नहेम्याह ७, २ कोरिन्थी ११, सपन्याह २, प्रकाश ११',
    'नहेम्याह ८, २ कोरिन्थी १२, सपन्याह ३, प्रकाश १२', 'नहेम्याह ९, २ कोरिन्थी १३, हाग्गै १, प्रकाश १३', 'नहेम्याह १०, गलाती १, हाग्गै २, प्रकाश १४', 'नहेम्याह ११, गलाती २, जकरिया १, प्रकाश १५',
    'नहेम्याह १२, गलाती ३, जकरिया २, प्रकाश १६', 'नहेम्याह १३, गलाती ४, जकरिया ३, प्रकाश १७', 'एस्तर १, गलाती ५, जकरिया ४, प्रकाश १८', 'एस्तर २, गलाती ६, जकरिया ५, प्रकाश १९',
    'एस्तर ३, एफिसी १, जकरिया ६, प्रकाश २०', 'एस्तर ४, एफिसी २, जकरिया ७, प्रकाश २१', 'एस्तर ५, एफिसी ३, जकरिया ८, प्रकाश २२', 'एस्तर ६, एफिसी ४, जकरिया ९, यूहन्ना १',
    'एस्तर ७, एफिसी ५, जकरिया १०, यूहन्ना २', 'एस्तर ८, एफिसी ६, जकरिया ११, यूहन्ना ३', 'एस्तर ९, फिलिप्पी १, जकरिया १२, यूहन्ना ४', 'एस्तर १०, फिलिप्पी २, जकरिया १३, यूहन्ना ५',
    'अय्यूब १, फिलिप्पी ३, जकरिया १४, यूहन्ना ६', 'अय्यूब २, फिलिप्पी ४, मलाकी १, यूहन्ना ७', 'अय्यूब ३, कलस्सी १, मलाकी २, यूहन्ना ८', 'अय्यूब ४, कलस्सी २, मलाकी ३, यूहन्ना ९',
    'अय्यूब ५, कलस्सी ३, मलाकी ४, यूहन्ना १०'
];
const PROVERBS_NNRV: { [key: number]: string } = {
    13: `१ बुद्धिमान् छोराले आफ्‍नो बाबुको अनुशासन मान्‍छ, तर अभिमानीले हप्की सुन्दैन।
२ असल मानिसले आफ्‍ना वचनको फलबाट असल कुराको आनन्द उठाउँछ, तर विश्‍वासघातीहरूको इच्‍छाचाहिँ हिंसाको निम्‍ति हुन्‍छ।
३ आफ्‍नो बोलीमा लगाम लगाउनेले आफ्‍नो जीवन रक्षा गर्छ, तर आफ्‍नो ओठलाई फुक्‍का छोड्नेचाहिँ सर्वनाश हुन्‍छ।
४ अल्छेले लालसा गर्छ, तर केही पाउँदैन, तर परिश्रमी मानिसको इच्‍छा पूर्ण रूपले पूरा हुन्‍छ।
५ धर्मी मानिसले झूटलाई घृणा गर्छ, तर दुष्‍ट मानिसले लाज र अपमान ल्‍याउँछ।
६ सोझो चाल चल्‍नेलाई धार्मिकताले रक्षा गर्छ, तर पापीलाई दुष्‍टताले नष्‍ट गर्छ।
७ एउटा मानिस धनी नभए पनि धनी भएको ढोंग गर्छ, अर्कोचाहिँ गरीब नभए पनि गरीब भएको ढोंग गर्छ।
८ धनी मानिसको फिरौती त्‍यसको धन-सम्‍पत्ति हो, तर गरीब मानिसले कुनै हप्की सुन्दैन।
९ धर्मीहरूको प्रकाशले आनन्दित तुल्याउँछ, तर दुष्‍टहरूको बत्ती निभाइनेछ।
१० अहङ्कारले झगड़ा मात्र उत्‍पन्‍न गर्छ, तर सल्‍लाह सुन्‍नेहरूमा बुद्धि हुन्‍छ।
११ बेइमानीले कमाएको धन घट्दैजान्‍छ, तर परिश्रम गरेर अलि-अलि गरी जम्मा गर्नेको धन बढ्दैजान्‍छ।
१२ आशाको पूर्तिमा ढिलाइले हृदयलाई रोगी बनाउँछ, तर इच्‍छा पूरा हुँदा त्‍यो जीवनको रूख हुन्‍छ।
१३ उपदेशलाई तुच्‍छ ठान्‍नेले आफ्‍नो सर्वनाश गर्छ, तर आज्ञाको आदर गर्नेलाई इनाम मिल्‍छ।
१४ बुद्धिमान् मानिसको शिक्षा जीवनको मूल हो, र मृत्‍युको पासोबाट मानिसलाई फर्काउँछ।
१५ असल समझले निगाह दिलाउँछ, तर विश्‍वासघातीहरूको मार्गचाहिँ कठोर हुन्‍छ।
१६ हरेक विवेकी मानिसले ज्ञानमा काम गर्छ, तर मूर्खले आफ्‍नो मूर्खता प्रकट गर्छ।
१७ एक जना दुष्‍ट दूतले कष्‍टमा पार्छ, तर एक जना विश्‍वासी दूतले आरोग्यता ल्‍याउँछ।
१८ अनुशासनलाई बेवास्ता गर्ने मानिस गरीबी र लाजमा पर्छ, तर हप्कीलाई वास्ता गर्नेको आदर हुन्‍छ।
१९ इच्‍छा पूरा हुँदा प्राणलाई मीठो लाग्‍छ, तर दुष्‍टताबाट अलग रहनुचाहिँ मूर्खहरूको निम्‍ति घिनलाग्‍दो कुरा हो।
२० बुद्धिमान् मानिसहरूको सङ्गत गर्, र तँ बुद्धिमान् हुनेछस्, तर मूर्खहरूको साथीलेचाहिँ हानि भोग्‍छ।
२१ पापीहरूलाई विपत्तिले खेद्‌छ, तर धर्मीहरूलाई इनाममा समृद्धि दिइन्‍छ।
२२ एक जना असल मानिसले आफ्‍ना नाति-नातिनाको निम्‍ति उत्तराधिकार छोड्‌छ, तर पापीको धन-सम्‍पत्तिचाहिँ धर्मीको निम्‍ति थुपारिन्छ।
२३ गरीब मानिसको नखनेको जमिनले धेरै अन्‍न उब्‍जाउँछ, तर अन्‍यायले गर्दा त्‍यो सखाप हुन्‍छ।
२४ लट्ठी प्रयोग नगर्नेले आफ्‍नो छोरालाई घृणा गर्छ, तर त्‍यसलाई प्रेम गर्नेले होशियारीसाथ अनुशासनमा राख्‍छ।
२५ धर्मी मानिसले पेटभरि खान्‍छ, तर दुष्‍टहरूको पेटचाहिँ खाली रहन्‍छ।`
};

// --- Helper Functions ---
const getDayOfYear = () => {
    const now = new Date();
    // Create a date for the start of the year in the local timezone
    const start = new Date(now.getFullYear(), 0, 1);
    // Calculate the difference in milliseconds and convert to days
    const diff = now.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    return Math.ceil(diff / oneDay);
};


const userCache: { [key: string]: User } = {};
const fetchUser = async (uid: string): Promise<User> => {
    if (!uid) return { id: 'unknown', name: 'Unknown', email: '', avatar: '?' };
    if (userCache[uid]) return userCache[uid];
    const userDoc = await getDoc(doc(db, 'users', uid));
    if (userDoc.exists()) {
        const user = { id: uid, ...userDoc.data() } as User;
        userCache[uid] = user;
        return user;
    }
    return { id: uid, name: 'Unknown User', email: '', avatar: '?' };
};
const fetchUsers = async (uids: string[]): Promise<User[]> => Promise.all(uids.map(uid => fetchUser(uid)));

// --- Reusable Components ---
const Modal = ({ children, onClose }: React.PropsWithChildren<{ onClose: () => void; }>) => {
    const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => { if (e.target === e.currentTarget) onClose(); };
    return (
        <div className="modal-backdrop" onClick={handleBackdropClick}>
            <div className="modal-content">
                <button onClick={onClose} className="modal-close-button"><span className="material-symbols-outlined">close</span></button>
                {children}
            </div>
        </div>
    );
};
const ImageUpload = ({ imagePreview, onImageChange, onImageRemove }: { imagePreview: string | null; onImageChange: (file: File) => void; onImageRemove: () => void; }) => {
    const fileInputRef = useRef<HTMLInputElement>(null);
    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => { e.target.files?.[0] && onImageChange(e.target.files[0]); };
    return (
        <div className="image-upload-container">
            {!imagePreview ? (<><input type="file" accept="image/*" onChange={handleFileSelect} style={{ display: 'none' }} ref={fileInputRef} /><label onClick={() => fileInputRef.current?.click()} className="image-upload-label"><span className="material-symbols-outlined">add_photo_alternate</span><span>फोटो थप्नुहोस् (यदि तपाईं चाहनुहुन्छ भने)</span></label></>) : (<div className="image-preview"><img src={imagePreview} alt="Preview" /><button onClick={onImageRemove}><span className="material-symbols-outlined">delete</span></button></div>)}
        </div>
    );
};

const NotificationPanel = ({ notifications, onClose }: { notifications: Notification[]; onClose: () => void; }) => {
    const panelRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
                if (!(event.target as Element).closest('.header-button.notifications')) {
                    onClose();
                }
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [onClose]);

    return (
        <div className="notification-panel" ref={panelRef}>
            <div className="notification-header"><h4>Notifications</h4></div>
            <div className="notification-list">
                {notifications.length > 0 ? (
                    notifications.map(notif => (
                        <div key={notif.id} className="notification-item">
                            <span className="material-symbols-outlined notification-icon">{notif.icon}</span>
                            <div className="notification-content">
                                <p>{notif.message}</p>
                                <span className="notification-timestamp">{notif.timestamp}</span>
                            </div>
                        </div>
                    ))
                ) : (
                    <p className="no-notifications">No new notifications.</p>
                )}
            </div>
        </div>
    );
};

// --- Auth Page ---
const LoginPage = ({ church }: { church: Church }) => {
    const [isLoginView, setIsLoginView] = useState(true);
    const [fullName, setFullName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const handleAuth = async (e: React.FormEvent, type: 'login' | 'signup') => {
        e.preventDefault();
        setError('');
        setIsLoading(true);
        try {
            if (type === 'login') {
                await signInWithEmailAndPassword(auth, email, password);
            } else {
                if (fullName.trim() === '') throw new Error('Please enter your full name.');
                const cred = await createUserWithEmailAndPassword(auth, email, password);
                const avatar = fullName.trim().split(' ').map(n => n[0]).join('').toUpperCase() || '?';
                await setDoc(doc(db, "users", cred.user.uid), { name: fullName.trim(), email: cred.user.email, avatar });
            }
        } catch (err: any) {
            setError(err.message || 'An error occurred.');
        } finally {
            setIsLoading(false);
        }
    };
    return (
        <div className="login-container"><div className="login-box"><img src={church.logo} alt={`${church.name} Logo`} className="login-logo" /><h2>{church.name}</h2><p>{isLoginView ? 'Log in to join.' : 'Create an account.'}</p><form onSubmit={(e) => handleAuth(e, isLoginView ? 'login' : 'signup')}>{!isLoginView && <input className="login-input" type="text" placeholder="Full Name" value={fullName} onChange={(e) => setFullName(e.target.value)} required />}<input className="login-input" type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required /><input className="login-input" type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required /><button className="login-button" type="submit" disabled={isLoading}>{isLoading ? '...' : (isLoginView ? 'Log In' : 'Sign Up')}</button></form>{error && <p className="login-error">{error}</p>}<button onClick={() => setIsLoginView(!isLoginView)} className="auth-toggle-link">{isLoginView ? "Don't have an account? Sign Up" : 'Already have an account? Log In'}</button></div></div>
    );
};

// --- Main App Pages ---
const WorshipPage = ({ church }: { church: Church; }) => {
    const [showOfferingModal, setShowOfferingModal] = useState(false);
    const copyToClipboard = (text: string) => navigator.clipboard.writeText(text).then(() => alert("Account number copied."));
    return (
        <div className="page-content"><h2>आरधना</h2><div className="card"><div className="twitch-container"><iframe src={`https://player.twitch.tv/?channel=${church.streamingInfo.twitchChannel}&parent=${window.location.hostname}`} height="100%" width="100%" allowFullScreen></iframe></div><p className="twitch-info-text">Join the live worship.</p><div className="worship-offering-container"><button className="action-button" onClick={() => setShowOfferingModal(true)}><span className="material-symbols-outlined">volunteer_activism</span>Online Offering</button></div></div>{showOfferingModal && (<Modal onClose={() => setShowOfferingModal(false)}><div className="offering-modal-content"><h3>Online Offering</h3><img src={church.offeringDetails.qrCodeUrl} alt="QR Code" className="qr-code-img" /><div className="offering-details"><p><strong>Bank:</strong> {church.offeringDetails.bankName}</p><p><strong>Account Holder:</strong> {church.offeringDetails.accountHolder}</p><div className="account-number-container"><p><strong>Account Number:</strong> {church.offeringDetails.accountNumber}</p><button className="copy-button" onClick={() => copyToClipboard(church.offeringDetails.accountNumber)}><span className="material-symbols-outlined">content_copy</span>Copy</button></div></div></div></Modal>)}</div>
    );
};
const NewsPage = () => (
    <div className="page-content">
        <h2>सुचना</h2>
        <div className="list-container">
            {MOCK_NEWS.length > 0 ? (
                [...MOCK_NEWS].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map(item => (
                    <div key={item.id} className="card news-item">
                        {item.image && <img src={item.image} alt={item.title} className="news-image"/>}
                        <div className="news-content">
                            <h3>{item.title}</h3>
                            <p className="news-meta">{item.date}</p>
                            <p>{item.content}</p>
                        </div>
                    </div>
                ))
            ) : (
                <div className="card">
                    <p>अहिलेसम्म कुनै समाचार वा घोषणाहरू छैनन्।</p>
                </div>
            )}
        </div>
    </div>
);
const BiblePage = () => {
    const [readingData, setReadingData] = useState<{title: string; plan: string; text: string} | null>(null);
    
    const dayOfYear = getDayOfYear();
    const mcheyneReading = MCHEYNE_READING_PLAN[dayOfYear - 1] || 'आजको लागि कुनै पढ्ने योजना छैन।';

    const today = new Date();
    const proverbsChapter = today.getDate();
    const proverbsText = PROVERBS_NNRV[proverbsChapter] || 'यस अध्यायको लागि हितोपदेशको पाठ एपमा उपलब्ध छैन।';
    
    const verse = MOCK_VERSES_OF_THE_DAY[dayOfYear % MOCK_VERSES_OF_THE_DAY.length];

    const handleShowMcheyne = () => {
        setReadingData({
            title: `म्याकचेन योजना: दिन ${dayOfYear}`,
            plan: mcheyneReading,
            text: "यो पढाइ योजना अनुसार व्यक्तिगत बाइबल अध्ययन गर्नुहोस्।"
        });
    };
    
    const handleShowProverb = () => {
        setReadingData({
            title: `हितोपदेश ${proverbsChapter}`,
            plan: `अध्याय ${proverbsChapter}`,
            text: proverbsText
        });
    };

    return (
        <div className="page-content">
            <h2>बाइबल</h2>
            <div className="card verse-card">
                <h3>दिनको पद</h3>
                <p className="verse-text">“{verse.text}”</p>
                <p className="verse-ref">- {verse.verse}</p>
            </div>
            <div className="card bible-card" onClick={handleShowMcheyne}>
                <h3>म्याकचेन बाइबल पढाइ योजना</h3>
                <p>आजको पढाइ: {mcheyneReading}</p>
            </div>
            <div className="card bible-card" onClick={handleShowProverb}>
                <h3>आजको हितोपदेश</h3>
                <p>आजको मिति अनुसार हितोपदेश अध्याय {proverbsChapter} पढ्नुहोस्।</p>
            </div>
            {readingData && (
                <Modal onClose={() => setReadingData(null)}>
                    <div className="bible-reading-modal-content">
                        <h3>{readingData.title}</h3>
                        <h4>{readingData.plan}</h4>
                        <div className="bible-text-content">
                            <p>{readingData.text}</p>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
};
const ChatListPage = ({ chats, onSelectChat, onCreateChat, currentUser }: { chats: Chat[]; onSelectChat: (id: string) => void; onCreateChat: () => void; currentUser: User; }) => {
    return (
        <div className="page-content chat-list-page"><h2>संगतिहरु</h2><div className="list-container">{chats.map(chat => { 
            const lastMsg = chat.messages[chat.messages.length - 1];
            let avatar: React.ReactNode;
            let name: string;

            if (chat.isGroup) {
                avatar = <div className="chat-avatar group-avatar"><span className="material-symbols-outlined">groups</span></div>;
                name = chat.name || 'Group Chat';
            } else {
                const other = chat.participants.find(p => p.id !== currentUser.id);
                if (!other) return null;
                avatar = <div className="chat-avatar">{other.avatar}</div>;
                name = other.name;
            }
            
            return (
                <div key={chat.id} className="list-item chat-item" onClick={() => onSelectChat(chat.id)}>
                    {avatar}
                    <div className="chat-info">
                        <span className="chat-name">{name}</span>
                        <span className="chat-last-message">{lastMsg ? lastMsg.content : 'No messages.'}</span>
                    </div>
                    {chat.isGroup && (
                        <div className="chat-participant-count">
                            <span className="material-symbols-outlined">group</span>
                            <span>{chat.participants.length}</span>
                        </div>
                    )}
                </div>); 
        })}</div><button className="fab" onClick={onCreateChat} aria-label="नयाँ कुराकानी"><span className="material-symbols-outlined">add_comment</span></button></div>
    );
};
const ConversationPage = ({ chat, onBack, onSendMessage, onShowMembers, currentUser }: { chat: Chat; onBack: () => void; onSendMessage: (chatId: string, content: string) => void; onShowMembers: () => void; currentUser: User }) => {
    const [newMessage, setNewMessage] = useState('');
    const messagesEndRef = useRef<HTMLDivElement>(null);
    useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' }); }, [chat.messages]);
    const handleSend = () => { if (newMessage.trim()) { onSendMessage(chat.id, newMessage.trim()); setNewMessage(''); } };
    
    let chatName: string;
    let otherParticipant: User | undefined;
    if (chat.isGroup) {
        chatName = chat.name || 'Group Chat';
    } else {
        otherParticipant = chat.participants.find(p => p.id !== currentUser.id);
        chatName = otherParticipant?.name || 'Chat';
    }
    
    return (
        <div className="conversation-page">
             <header className={`conversation-header ${chat.isGroup ? 'is-group' : ''}`} onClick={chat.isGroup ? onShowMembers : undefined}>
                <button className="back-button" onClick={onBack}><span className="material-symbols-outlined">arrow_back</span></button>
                <h3>{chatName}</h3>
                {chat.isGroup ? <button className="header-button info-button"><span className="material-symbols-outlined">info</span></button> : <div style={{width: 40}}></div>}
            </header>
            <div className="message-list">{chat.messages.map(msg => {
                const sender = chat.participants.find(p => p.id === msg.senderId);
                const isSent = msg.senderId === currentUser.id;
                return (
                    <div key={msg.id} className={`message-container ${isSent ? 'sent' : 'received'}`}>
                        {chat.isGroup && !isSent && <div className="sender-name">{sender?.name || '...'}</div>}
                        <div className="message-bubble">{msg.content}</div>
                    </div>
                );
            })}<div ref={messagesEndRef} /></div>
            <div className="message-input-container"><input type="text" placeholder="Type a message..." value={newMessage} onChange={(e) => setNewMessage(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleSend()} /><button className="send-button" onClick={handleSend}><span className="material-symbols-outlined">send</span></button></div>
        </div>
    );
};
const PrayerPage = ({ prayerRequests, onPray, onAddRequest, onSelectRequest, currentUser }: { prayerRequests: PrayerRequest[]; onPray: (id: string) => void; onAddRequest: () => void; onSelectRequest: (req: PrayerRequest) => void; currentUser: User; }) => (
    <div className="page-content"><h2>प्रार्थना</h2><div className="list-container">{prayerRequests.map(req => (<div key={req.id} className="card prayer-item" onClick={() => onSelectRequest(req)}>{req.image && <img src={req.image} alt={req.title} className="prayer-image"/>}<h4>{req.title}</h4><p className="prayer-content">{req.content}</p><div className="prayer-meta"><span>By {req.author.name}</span><div className="prayer-actions"><button className={`prayer-action-button ${req.prayedBy.includes(currentUser.id) ? 'prayed' : ''}`} onClick={(e) => { e.stopPropagation(); onPray(req.id); }}><span className="material-symbols-outlined">volunteer_activism</span><span>{req.prayedBy.length}</span></button><div className="prayer-action-button comment-button"><span className="material-symbols-outlined">chat_bubble</span><span>{req.comments.length}</span></div></div></div></div>))}</div><button className="fab" onClick={onAddRequest} aria-label="नयाँ प्रार्थना अनुरोध"><span className="material-symbols-outlined">edit_note</span></button></div>
);
const PodcastPage = ({ podcasts, onAddPodcast }: { podcasts: Podcast[]; onAddPodcast: () => void; }) => (
    <div className="page-content"><h2>Podcast</h2><div className="list-container">{podcasts.length > 0 ? podcasts.map(p => (<div key={p.id} className="card podcast-item"><div className="podcast-info"><div><h4 className="podcast-title">{p.title}</h4><p className="podcast-author">By {p.author.name}</p></div></div><audio controls className="podcast-player" src={p.audioUrl}></audio></div>)) : <p>No podcasts available yet.</p>}</div><button className="fab" onClick={onAddPodcast} aria-label="New Podcast"><span className="material-symbols-outlined">mic</span></button></div>
);

// --- Modals ---
const AddPrayerRequestModal = ({ onClose, onAddRequest }: { onClose: () => void; onAddRequest: (data: { title: string; content: string; imageFile: File | null; }) => void; }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [imageFile, setImageFile] = useState<File | null>(null);
    const [imagePreview, setImagePreview] = useState<string | null>(null);
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); if (title.trim() && content.trim()) { onAddRequest({ title, content, imageFile }); } };
    const handleImageChange = (file: File) => { setImageFile(file); setImagePreview(URL.createObjectURL(file)); };
    const handleImageRemove = () => { setImageFile(null); setImagePreview(null); };
    return (
        <Modal onClose={onClose}><form className="modal-form" onSubmit={handleSubmit}><h3>प्रार्थना अनुरोध</h3><input type="text" placeholder="शीर्षक" value={title} onChange={(e) => setTitle(e.target.value)} required /><textarea rows={5} placeholder="हामीले केको लागि प्रार्थना गर्नुपर्छ?" value={content} onChange={(e) => setContent(e.target.value)} required /><ImageUpload imagePreview={imagePreview} onImageChange={handleImageChange} onImageRemove={handleImageRemove} /><button type="submit" className="action-button">अनुरोध पोस्ट गर्नुहोस्</button></form></Modal>
    );
};
const PrayerDetailsModal = ({ request, onClose, onPray, onComment, currentUser }: { request: PrayerRequest; onClose: () => void; onPray: (id: string) => void; onComment: (id: string, text: string) => void; currentUser: User; }) => {
    const [comment, setComment] = useState('');
    const handleCommentSubmit = (e: React.FormEvent) => { e.preventDefault(); if (comment.trim()) { onComment(request.id, comment.trim()); setComment(''); } };
    const isPrayed = request.prayedBy.includes(currentUser.id);
    return (
        <Modal onClose={onClose}><div className="prayer-details-modal"><div className="prayer-details-content"><h3>{request.title}</h3><p className="prayer-author">By {request.author.name}</p>{request.image && <img src={request.image} alt={request.title} className="prayer-image" />}<p className="prayer-main-content">{request.content}</p><div className="prayer-meta"><div className="prayer-actions"><button className={`prayer-action-button ${isPrayed ? 'prayed' : ''}`} onClick={() => onPray(request.id)}><span className="material-symbols-outlined">volunteer_activism</span><span>{request.prayedBy.length} I prayed</span></button></div></div></div><div className="prayer-comments-section"><h4>Comments ({request.comments.length})</h4><div className="prayer-comment-list">{request.comments.length > 0 ? [...request.comments].reverse().map(c => (<div key={c.id} className="comment-item"><p><strong>{c.author.name}:</strong> {c.content}</p></div>)) : <p className="no-comments">No comments yet.</p>}</div><form className="comment-form" onSubmit={handleCommentSubmit}><input type="text" placeholder="Add a comment..." value={comment} onChange={(e) => setComment(e.target.value)} /><button type="submit"><span className="material-symbols-outlined">send</span></button></form></div></div></Modal>
    );
};
const CreateChatModal = ({ onClose, onStartChat, allUsers, currentUser }: { onClose: () => void; onStartChat: (userIds: string[]) => void; allUsers: User[]; currentUser: User }) => {
    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);
    const handleToggleUser = (id: string) => {
        setSelectedUserIds(prev => prev.includes(id) ? prev.filter(uid => uid !== id) : [...prev, id]);
    };
    const handleCreate = () => { if (selectedUserIds.length > 0) onStartChat(selectedUserIds); };
    return (
        <Modal onClose={onClose}>
            <div className="create-chat-modal">
                <h3>Start a conversation</h3>
                <div className="user-list">
                    {allUsers.filter(u => u.id !== currentUser.id).map(user => {
                        const isSelected = selectedUserIds.includes(user.id);
                        return (
                             <div key={user.id} className={`user-list-item selectable ${isSelected ? 'selected' : ''}`} onClick={() => handleToggleUser(user.id)}>
                                <div className="chat-avatar">{user.avatar}</div>
                                <span className="user-name">{user.name}</span>
                                <span className={`material-symbols-outlined checkbox-icon ${isSelected ? 'checked' : ''}`}>{isSelected ? 'check_box' : 'check_box_outline_blank'}</span>
                            </div>
                        )
                    })}
                </div>
                 <button className="action-button" onClick={handleCreate} disabled={selectedUserIds.length === 0}>
                    {selectedUserIds.length > 1 ? 'Create Group Chat' : 'Start Chat'}
                </button>
            </div>
        </Modal>
    );
};
const AddPodcastModal = ({ onClose, onAddPodcast }: { onClose: () => void; onAddPodcast: (data: { title: string; audioFile: File; }) => void; }) => {
    const [title, setTitle] = useState('');
    const [audioFile, setAudioFile] = useState<File | null>(null);
    const [audioPreview, setAudioPreview] = useState<string | null>(null);
    const [isRecording, setIsRecording] = useState(false);
    const mediaRecorderRef = useRef<MediaRecorder | null>(null);
    const audioChunksRef = useRef<Blob[]>([]);

    const handleStartRecording = async () => {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorderRef.current = new MediaRecorder(stream);
        mediaRecorderRef.current.ondataavailable = event => audioChunksRef.current.push(event.data);
        mediaRecorderRef.current.onstop = () => {
            const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
            const audioUrl = URL.createObjectURL(audioBlob);
            setAudioFile(new File([audioBlob], "recording.webm", { type: 'audio/webm' }));
            setAudioPreview(audioUrl);
            audioChunksRef.current = [];
        };
        mediaRecorderRef.current.start();
        setIsRecording(true);
    };
    const handleStopRecording = () => { mediaRecorderRef.current?.stop(); setIsRecording(false); };
    const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); if (title.trim() && audioFile) onAddPodcast({ title, audioFile }); };

    return (
        <Modal onClose={onClose}><form className="modal-form" onSubmit={handleSubmit}><h3>New Podcast</h3><input type="text" placeholder="Title" value={title} onChange={(e) => setTitle(e.target.value)} required /><div className="recording-ui">{!audioFile && (<><h4>Record Audio</h4><button type="button" onClick={isRecording ? handleStopRecording : handleStartRecording} className={`record-button ${isRecording ? 'stop' : ''}`}>{isRecording && <div className="recording-dot"></div>}</button><p>{isRecording ? "Recording..." : "Tap to record"}</p></>)}{audioPreview && (<div className="audio-preview"><h4>Preview</h4><audio src={audioPreview} controls /><button type="button" className="action-button secondary" onClick={() => { setAudioFile(null); setAudioPreview(null); }}>Record Again</button></div>)}</div><button type="submit" className="action-button" disabled={!title || !audioFile}>Upload Podcast</button></form></Modal>
    );
};
const ChatMembersModal = ({ chat, allUsers, onClose, onAddMembers }: { chat: Chat; allUsers: User[]; onClose: () => void; onAddMembers: (chatId: string, userIds: string[]) => void; }) => {
    const [isAdding, setIsAdding] = useState(false);
    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);
    
    const usersToAdd = allUsers.filter(u => !chat.participantIds.includes(u.id));

    const handleToggleUser = (id: string) => {
        setSelectedUserIds(prev => prev.includes(id) ? prev.filter(uid => uid !== id) : [...prev, id]);
    };

    const handleConfirmAdd = () => {
        if (selectedUserIds.length > 0) {
            onAddMembers(chat.id, selectedUserIds);
        }
        setIsAdding(false);
        setSelectedUserIds([]);
    };
    
    return (
        <Modal onClose={onClose}>
            <div className="chat-members-modal">
                <h3>대화 정보</h3>
                {!isAdding ? (
                    <>
                        <h4>참여자 ({chat.participants.length})</h4>
                        <div className="user-list">
                            {chat.participants.map(user => (
                                <div key={user.id} className="user-list-item">
                                    <div className="chat-avatar">{user.avatar}</div>
                                    <span className="user-name">{user.name}</span>
                                </div>
                            ))}
                        </div>
                        <button className="action-button" onClick={() => setIsAdding(true)}>
                            <span className="material-symbols-outlined">person_add</span>
                            참여자 추가
                        </button>
                    </>
                ) : (
                    <>
                        <h4>Add to conversation</h4>
                         <div className="user-list">
                            {usersToAdd.map(user => {
                                const isSelected = selectedUserIds.includes(user.id);
                                return (
                                    <div key={user.id} className={`user-list-item selectable ${isSelected ? 'selected' : ''}`} onClick={() => handleToggleUser(user.id)}>
                                        <div className="chat-avatar">{user.avatar}</div>
                                        <span className="user-name">{user.name}</span>
                                        <span className={`material-symbols-outlined checkbox-icon ${isSelected ? 'checked' : ''}`}>{isSelected ? 'check_box' : 'check_box_outline_blank'}</span>
                                    </div>
                                )
                            })}
                        </div>
                        <button className="action-button" onClick={handleConfirmAdd} disabled={selectedUserIds.length === 0}>
                            Add ({selectedUserIds.length})
                        </button>
                        <button className="action-button secondary" onClick={() => setIsAdding(false)}>Cancel</button>
                    </>
                )}
            </div>
        </Modal>
    );
};

// --- Main App Component ---
const App = () => {
    const [user, setUser] = useState<User | null | undefined>(undefined);
    const [activePage, setActivePage] = useState('worship');
    const [prayerRequests, setPrayerRequests] = useState<PrayerRequest[]>([]);
    const [podcasts, setPodcasts] = useState<Podcast[]>([]);
    const [chats, setChats] = useState<Chat[]>([]);
    const [allUsers, setAllUsers] = useState<User[]>([]);
    const [activeChatId, setActiveChatId] = useState<string | null>(null);
    const [selectedPrayerRequest, setSelectedPrayerRequest] = useState<PrayerRequest | null>(null);
    const [showAddPrayerModal, setShowAddPrayerModal] = useState(false);
    const [showCreateChatModal, setShowCreateChatModal] = useState(false);
    const [showAddPodcastModal, setShowAddPodcastModal] = useState(false);
    const [notifications, setNotifications] = useState<Notification[]>(MOCK_NOTIFICATIONS);
    const [showNotifications, setShowNotifications] = useState(false);
    const [hasUnread, setHasUnread] = useState(true);
    const [showMembersModal, setShowMembersModal] = useState(false);
    
    useEffect(() => {
        onAuthStateChanged(auth, async (fbUser) => {
            if (fbUser) {
                const userDoc = await fetchUser(fbUser.uid);
                setUser(userDoc);
                const usersQuery = await getDocs(collection(db, "users"));
                setAllUsers(usersQuery.docs.map(doc => ({ id: doc.id, ...doc.data() } as User)));
            } else {
                setUser(null);
            }
        });
    }, []);

    useEffect(() => {
        if (!user) return;
        const prayerQ = query(collection(db, "prayerRequests"), orderBy("createdAt", "desc"));
        const unsubPrayer = onSnapshot(prayerQ, async (snap) => {
            const reqs = await Promise.all(snap.docs.map(async (d) => {
                const data = d.data();
                const author = await fetchUser(data.authorId);
                const comments = await Promise.all((data.comments || []).map(async (c: any) => ({...c, id: Math.random().toString(), author: await fetchUser(c.authorId)})));
                return { ...data, id: d.id, author, comments, prayedBy: data.prayedBy || [], createdAt: data.createdAt } as PrayerRequest;
            }));
            setPrayerRequests(reqs);
        });
        const podcastQ = query(collection(db, "podcasts"), orderBy("createdAt", "desc"));
        const unsubPodcast = onSnapshot(podcastQ, async (snap) => {
            const pods = await Promise.all(snap.docs.map(async (d) => ({ ...d.data(), id: d.id, author: await fetchUser(d.data().authorId) } as Podcast)));
            setPodcasts(pods);
        });
        const chatQ = query(collection(db, "chats"), where("participantIds", "array-contains", user.id), orderBy("lastMessageTimestamp", "desc"));
        const unsubChat = onSnapshot(chatQ, async (snap) => {
            const chs = await Promise.all(snap.docs.map(async (d) => {
                const data = d.data();
                return { ...data, id: d.id, participants: await fetchUsers(data.participantIds), messages: (data.messages || []) } as Chat;
            }));
            setChats(chs);
        });
        return () => { unsubPrayer(); unsubPodcast(); unsubChat(); };
    }, [user]);

    const handleLogout = () => signOut(auth);
    const handlePray = async (reqId: string) => { if (user) await updateDoc(doc(db, "prayerRequests", reqId), { prayedBy: prayerRequests.find(r => r.id === reqId)?.prayedBy.includes(user.id) ? arrayRemove(user.id) : arrayUnion(user.id) }); };
    const handleAddPrayerRequest = async ({ title, content, imageFile }: { title: string; content: string; imageFile: File | null; }) => {
        if (!user) return;
        let imageUrl = '';
        if (imageFile) {
            const storageRef = ref(storage, `prayerImages/${Date.now()}_${imageFile.name}`);
            const snapshot = await uploadBytes(storageRef, imageFile);
            imageUrl = await getDownloadURL(snapshot.ref);
        }
        await addDoc(collection(db, "prayerRequests"), { authorId: user.id, title, content, image: imageUrl, prayedBy: [], comments: [], createdAt: serverTimestamp() });
        setShowAddPrayerModal(false);
    };
    const handleComment = async (reqId: string, text: string) => { if (user) await updateDoc(doc(db, "prayerRequests", reqId), { comments: arrayUnion({ authorId: user.id, content: text, createdAt: Timestamp.now() }) }); };
    const handleAddPodcast = async ({ title, audioFile }: { title: string; audioFile: File }) => {
        if(!user) return;
        const storageRef = ref(storage, `podcasts/${Date.now()}_${audioFile.name}`);
        const snapshot = await uploadBytes(storageRef, audioFile);
        const audioUrl = await getDownloadURL(snapshot.ref);
        await addDoc(collection(db, 'podcasts'), { title, authorId: user.id, audioUrl, createdAt: serverTimestamp() });
        setShowAddPodcastModal(false);
    };
    const handleSendMessage = async (chatId: string, content: string) => {
        if (!user) return;
        const now = Timestamp.now();
        await updateDoc(doc(db, "chats", chatId), { messages: arrayUnion({ senderId: user.id, content, type: 'text', createdAt: now }), lastMessageTimestamp: now });
    };
    const handleStartChat = async (otherUserIds: string[]) => {
        if (!user || otherUserIds.length === 0) return;

        const isGroup = otherUserIds.length > 1;
        const participantIds = [user.id, ...otherUserIds].sort();

        // Check for existing chat
        const chatQuery = query(collection(db, "chats"), where("participantIds", "==", participantIds));
        const existingChats = await getDocs(chatQuery);
        if (!existingChats.empty) {
            setActiveChatId(existingChats.docs[0].id);
        } else {
             // Create a new chat
            let chatName = '';
            if (isGroup) {
                const participants = await fetchUsers(otherUserIds);
                chatName = `${participants.map(p => p.name.split(' ')[0]).join(', ')}, and ${user.name.split(' ')[0]}`;
            }
            const newChatRef = await addDoc(collection(db, "chats"), { 
                participantIds, 
                messages: [], 
                lastMessageTimestamp: serverTimestamp(),
                isGroup,
                name: isGroup ? chatName : '',
                groupAvatar: isGroup ? 'groups' : '',
            });
            setActiveChatId(newChatRef.id);
        }
        setShowCreateChatModal(false);
    };
    const handleAddMembers = async (chatId: string, newUserIds: string[]) => {
        await updateDoc(doc(db, "chats", chatId), { participantIds: arrayUnion(...newUserIds) });
    };

     const handleNotificationToggle = () => {
        setShowNotifications(prev => !prev);
        if (hasUnread) {
            setHasUnread(false);
        }
    };
    
    if (user === undefined) return <div className="login-container"><div>Loading...</div></div>;
    if (user === null) return <LoginPage church={CHURCH} />;
    
    const renderPage = () => {
        if (activePage === 'fellowship' && activeChatId) return null; // Hide list on mobile when convo is open
        switch (activePage) {
            case 'worship': return <WorshipPage church={CHURCH} />;
            case 'news': return <NewsPage />;
            case 'bible': return <BiblePage />;
            case 'fellowship': return <ChatListPage chats={chats} onSelectChat={setActiveChatId} onCreateChat={() => setShowCreateChatModal(true)} currentUser={user} />;
            case 'prayer': return <PrayerPage prayerRequests={prayerRequests} onPray={handlePray} onAddRequest={() => setShowAddPrayerModal(true)} onSelectRequest={setSelectedPrayerRequest} currentUser={user} />;
            case 'podcast': return <PodcastPage podcasts={podcasts} onAddPodcast={() => setShowAddPodcastModal(true)} />;
            default: return <WorshipPage church={CHURCH} />;
        }
    };

    const activeChat = chats.find(c => c.id === activeChatId);
    const openPrayer = prayerRequests.find(r => r.id === selectedPrayerRequest?.id);
    
    const TRANSLATIONS: { [key: string]: string } = {
        worship: 'आरधना',
        podcast: 'Podcast',
        news: 'सुचना',
        bible: 'बाइबल',
        fellowship: 'संगतिहरु',
        prayer: 'प्रार्थना',
    };
    const NAV_ORDER = ['worship', 'podcast', 'news', 'bible', 'fellowship', 'prayer'];

    return (
        <div className="app-container">
            <header className="app-header">
                 <div className="header-content"><img src={CHURCH.logo} alt="Logo" className="header-logo" /><h1>{CHURCH.name}</h1></div>
                 <div className="header-actions">
                    <button className="header-button notifications" onClick={handleNotificationToggle} aria-label="Notifications">
                        <span className="material-symbols-outlined">notifications</span>
                        {hasUnread && <div className="notification-dot"></div>}
                    </button>
                    <button className="header-button" onClick={handleLogout} aria-label="Log Out"><span className="material-symbols-outlined">logout</span></button>
                </div>
            </header>
            <main className="main-content">{renderPage()}</main>
            
            {showNotifications && <NotificationPanel notifications={notifications} onClose={() => setShowNotifications(false)} />}

            <nav className="bottom-nav">
                {NAV_ORDER.map(page => {
                    const icons: { [key: string]: string } = { worship: 'church', news: 'feed', bible: 'book_2', fellowship: 'groups', prayer: 'volunteer_activism', podcast: 'podcasts' };
                    return (<button key={page} className={`nav-item ${activePage === page ? 'active' : ''}`} onClick={() => { setActivePage(page); setActiveChatId(null); }}><span className="material-symbols-outlined">{icons[page]}</span><span>{TRANSLATIONS[page]}</span></button>);
                })}
            </nav>
            
            {activeChat && <ConversationPage chat={activeChat} onBack={() => setActiveChatId(null)} onSendMessage={handleSendMessage} onShowMembers={() => setShowMembersModal(true)} currentUser={user} />}
            {showAddPrayerModal && <AddPrayerRequestModal onClose={() => setShowAddPrayerModal(false)} onAddRequest={handleAddPrayerRequest} />}
            {openPrayer && <PrayerDetailsModal request={openPrayer} onClose={() => setSelectedPrayerRequest(null)} onPray={handlePray} onComment={handleComment} currentUser={user} />}
            {showCreateChatModal && <CreateChatModal onClose={() => setShowCreateChatModal(false)} onStartChat={handleStartChat} allUsers={allUsers} currentUser={user} />}
            {showAddPodcastModal && <AddPodcastModal onClose={() => setShowAddPodcastModal(false)} onAddPodcast={handleAddPodcast} />}
            {showMembersModal && activeChat && <ChatMembersModal chat={activeChat} allUsers={allUsers} onClose={() => setShowMembersModal(false)} onAddMembers={handleAddMembers} />}
        </div>
    );
};

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(<React.StrictMode><App /></React.StrictMode>);